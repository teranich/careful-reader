{"version":3,"sources":["components/bookshelf/Bookshelf.tsx","uitls/common.ts","uitls/styler.ts","components/controls/Checkbox.tsx","uitls/database.ts","components/reader/Reader.tsx","uitls/converter.ts","store/BooksReducer.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Bookshelf","books","dispatch","useContext","DispatchContext","className","htmlFor","src","alt","type","name","id","onChange","event","target","files","length","file","reader","FileReader","Promise","resolve","reject","onload","result","onerror","error","readAsText","readFileContent","then","text","payload","accept","map","book","key","to","getStyledElement","indexes","Array","keys","sort","Math","random","index","children","split","word","join","wrapper","document","createElement","innerHTML","stylize","element","el","n","a","walk","createTreeWalker","NodeFilter","SHOW_TEXT","nextNode","push","textNodesUnder","forEach","textElement","includes","styledTextElement","textContent","replaceWith","isOnScreen","screenContainerElement","viewportTop","scrollTop","viewportHeight","clientHeight","viewportBottom","top","offsetTop","height","bottom","Checkbox","label","value","checked","DB_NAME","openDB","upgrade","db","createObjectStore","keyPath","autoIncrement","storeBook","fileMeta","tx","transaction","objectStore","add","primaryKey","record","positionElement","done","bookId","get","oldBook","newBook","put","getAll","dfunc","func","waitFor","timeout","args","clearTimeout","setTimeout","debounce","fn","Reader","state","StateContext","useState","numberOfcurrentPage","setNumberOfCurrentPage","currenPositionPercent","setCurrenPositionPercent","pagesCount","setPagesCount","wordsHighlight","setWordsHighlight","textContainerRef","useRef","elementsForHightlight","queryParams","useParams","parseInt","handleScroll","e","current","percent","scrollHeight","getPercentOfScroll","toFixed","round","getNumberOfCurrentPage","posElement","getAttribute","updateBookPosition","screenElement","allElements","onScreen","i","hightLightElementsOnScreen","useEffect","getBookText","currentBook","find","toElement","querySelector","scrollIntoView","restoreScrollPoition","addEventListener","getPagesCount","querySelectorAll","b","getElementsForHightlight","removeEventListener","handlePageChange","direction","sign","ref","onClick","convertFB2ToHtml","bookText","parser","DOMParser","parseFromString","fetch","res","str","window","xsl","xsltProcessor","XSLTProcessor","importStylesheet","transformToDocument","initialBooksState","useBooksReducer","memoizedReducer","useCallback","action","getBookList","addBookToDB","updateBook","appReducer","React","useReducer","html","body","createContext","App","Provider","path","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","initDB","app","ReactDOM","render","getElementById","URL","process","href","origin","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.ac7ee0a7.chunk.js","sourcesContent":["import React, { useContext, useEffect } from 'react'\nimport { BookList, Book } from '../../types'\nimport { Link } from 'react-router-dom'\nimport { readFileContent } from '../../uitls/common'\nimport './Bookshelf.scss'\nimport { DispatchContext } from '../../App'\ninterface IBookshelfProps {\n  books?: BookList\n}\n\nexport default function Bookshelf({ books = [] }: IBookshelfProps) {\n  const dispatch = useContext(DispatchContext)\n\n  return (\n    <div className=\"book-shelf\">\n      <label className=\"add-book-lable\" htmlFor=\"btn-add-book\">\n        <img src=\"add-book.png\" alt=\"\" />\n        <div className=\"add-book-text\">add book</div>\n        <input\n          type=\"file\"\n          name=\"\"\n          id=\"btn-add-book\"\n          onChange={onChangeHandler}\n          accept=\".fb2\"\n        />\n      </label>\n\n      <ul className=\"collection\">\n        {books.map((book: Book) => (\n          <li className=\"list-item\" key={book.id}>\n            <Link to={`/read/${book.id}`}>{book.name}</Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  )\n\n  function onChangeHandler(event: React.ChangeEvent<HTMLInputElement>) {\n    if (event.target.files?.length) {\n      const file = event.target.files[0]\n      readFileContent(file).then((text: string) => {\n        const payload = {\n          text,\n          file,\n        }\n        dispatch({ type: 'add_book', payload })\n      })\n    }\n  }\n}\n","/*\nREST API\n\n*/\nimport React from 'react'\nimport { Book, BookList } from '../types'\n\nexport async function getBooksList(): Promise<BookList> {\n  return fetch('db.json').then((resp) => resp.json())\n}\n\n/**\n * Register or update value for specified key.\n * @param key Key to identify value in container.\n * @param value Value to inject.\n * @returns Created or existing [DiRecord]{@link DiRecord}\n */\n\nexport async function getBook(filePath: string): Promise<string> {\n  return fetch(filePath).then((resp) => resp.text())\n}\n\nexport function readFileContent(file: File): Promise<string> {\n  const reader = new FileReader()\n\n  return new Promise((resolve, reject) => {\n    reader.onload = (event) => {\n      return resolve(event?.target?.result + '')\n    }\n    reader.onerror = (error) => reject('error reading file')\n    reader.readAsText(file)\n  })\n}\n\nexport const debounce = <F extends (...args: any[]) => any>(\n  func: F,\n  waitFor: number\n) => {\n  let timeout: ReturnType<typeof setTimeout> | null = null\n\n  const debounced = (...args: Parameters<F>) => {\n    if (timeout !== null) {\n      clearTimeout(timeout)\n      timeout = null\n    }\n    timeout = setTimeout(() => func(...args), waitFor)\n  }\n\n  return debounced as (...args: Parameters<F>) => ReturnType<F>\n}\n","const MAX_WORD_CLASSES = 100\n\nexport function hightLightElementsOnScreen(\n  screenElement: any,\n  allElements: any\n): any[] {\n  const onScreen: any[] = []\n  if (!screenElement) return onScreen\n  const viewportTop = screenElement.scrollTop\n  const viewportHeight = screenElement.clientHeight\n  const viewportBottom = viewportTop + viewportHeight\n  for (let i = 0; i < allElements.length; i++) {\n    const el = allElements[i]\n    if (isOnScreen(el, screenElement)) {\n      stylize(el)\n      onScreen.push(el)\n    }\n    if (el.offsetTop > viewportBottom) {\n      break\n    }\n  }\n  return onScreen\n}\n\nexport function getStyledElement(text: string) {\n  // const separator = /(?:,| |&nbsp;|\\.)+/\n  const indexes = shuffle([...Array(MAX_WORD_CLASSES).keys()])\n  const separator = ' '\n  let index = 0\n  const children = text\n    .split(separator)\n    .map((word: string) => {\n      index = index >= MAX_WORD_CLASSES ? 0 : index + 1\n      return `<span class=\"w${indexes[index]}\">${word}</span>`\n    })\n    .join(separator)\n  const wrapper = document.createElement('hlw')\n  wrapper.innerHTML = children\n  return wrapper\n}\n\nfunction shuffle<T>(array: Array<T>) {\n  return array.sort(() => Math.random() - 0.5)\n}\nfunction textNodesUnder(el: HTMLElement) {\n  var n,\n    a = [],\n    walk = document.createTreeWalker(el, NodeFilter.SHOW_TEXT, null, false)\n  while ((n = walk.nextNode())) a.push(n)\n  return a\n}\n\nexport function stylize(element: HTMLElement) {\n  textNodesUnder(element).forEach((textElement: any) => {\n    if (textElement && !element.className.includes('hg')) {\n      const styledTextElement = getStyledElement(textElement.textContent)\n      textElement.replaceWith(styledTextElement)\n      element.className += ' hg'\n    }\n  })\n}\n\nfunction isOnScreen(el: any, screenContainerElement: any) {\n  const viewportTop = screenContainerElement.scrollTop\n  const viewportHeight = screenContainerElement.clientHeight\n  const viewportBottom = viewportTop + viewportHeight\n  const top = el.offsetTop\n  const height = el.clientHeight\n  const bottom = top + height\n\n  return (\n    (top >= viewportTop && top < viewportBottom) ||\n    (bottom > viewportTop && bottom <= viewportBottom) ||\n    (height > viewportHeight && top <= viewportTop && bottom >= viewportBottom)\n  )\n}\n","import React from 'react'\n\ninterface CheckboxProps {\n  label?: string\n  name?: string\n  value?: boolean\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\n}\n\nexport function Checkbox({ label, name, value, onChange }: CheckboxProps) {\n  return (\n    <label>\n      <span>{label}</span>\n      <input\n        type=\"checkbox\"\n        name={name}\n        checked={value}\n        value=\"1\"\n        onChange={onChange}\n      />\n    </label>\n  )\n}\n","import { openDB, DBSchema } from 'idb'\n\ninterface ILibrarySchema extends DBSchema {\n  index: {\n    key: string\n    value: {}\n  }\n}\n\nconst DB_VERSION = 1\nconst DB_NAME = 'library'\nconst DB_INDEX_NAME = 'index'\nconst DB_STORE_NAME = 'books'\n\nasync function initDB() {\n  return openDB(DB_NAME, DB_VERSION, {\n    upgrade(db) {\n      db.createObjectStore(DB_INDEX_NAME, { keyPath: 'id' })\n      db.createObjectStore(DB_STORE_NAME, { autoIncrement: true })\n    },\n  })\n}\n\nasync function storeBook(text: string, fileMeta: File) {\n  const db = await openDB(DB_NAME, DB_VERSION)\n  const tx = db.transaction([DB_INDEX_NAME, DB_STORE_NAME], 'readwrite')\n  const primaryKey = await tx.objectStore(DB_STORE_NAME).add(text)\n  const record = {\n    id: primaryKey,\n    name: fileMeta.name,\n    positionElement: null,\n  }\n\n  tx.objectStore(DB_INDEX_NAME).add(record)\n  await tx.done\n  return record\n}\n\nasync function updateBook(bookId: number, book: any) {\n  const db = await openDB(DB_NAME, DB_VERSION)\n  const objectStore = db\n    .transaction([DB_INDEX_NAME], 'readwrite')\n    .objectStore(DB_INDEX_NAME)\n  return objectStore.get(bookId).then((oldBook) => {\n    const newBook = {\n      ...oldBook,\n      ...book,\n    }\n    return objectStore.put(newBook).then(() => newBook)\n  })\n}\n\nasync function getBookList() {\n  const db = await openDB(DB_NAME, DB_VERSION)\n  return db.getAll(DB_INDEX_NAME)\n}\n\nasync function getBookText(id: number) {\n  const db = await openDB(DB_NAME, DB_VERSION)\n  return db.get(DB_STORE_NAME, id)\n}\n\nexport { initDB, storeBook, getBookList, getBookText, updateBook }\n","import React, { useEffect, useState, useRef, useContext } from 'react'\nimport './Reader.scss'\nimport { useParams, Link } from 'react-router-dom'\nimport { debounce } from '../../uitls/common'\nimport { hightLightElementsOnScreen } from '../../uitls/styler'\nimport { Checkbox } from '../controls/Checkbox'\nimport { DispatchContext, StateContext } from '../../App'\nimport { getBookText } from '../../uitls/database'\nimport { Book } from '../../types'\n\ninterface QueryParams {\n  bookId: string\n}\n\nconst dfunc = debounce((fn) => fn && fn(), 100)\n\nexport default function Reader() {\n  const dispatch = useContext(DispatchContext)\n  const state = useContext(StateContext)\n  const [numberOfcurrentPage, setNumberOfCurrentPage] = useState(0)\n  const [currenPositionPercent, setCurrenPositionPercent] = useState('0.0')\n  const [pagesCount, setPagesCount] = useState(0)\n  const [wordsHighlight, setWordsHighlight] = useState(true)\n  const textContainerRef = useRef<HTMLDivElement | null>(null)\n  let elementsForHightlight: any = []\n  const queryParams = useParams<QueryParams>()\n  const bookId = parseInt(queryParams.bookId)\n\n  useEffect(() => {\n    const { current } = textContainerRef\n    getBookText(bookId).then((text) => {\n      current!.innerHTML = text\n      restoreScrollPoition()\n      current!.addEventListener('scroll', handleScroll)\n      setPagesCount(getPagesCount())\n      elementsForHightlight = getElementsForHightlight()\n    })\n\n    return () => {\n      return current!.removeEventListener('scroll', handleScroll)\n    }\n  }, [])\n\n  function getElementsForHightlight() {\n    const result: any = []\n    document.querySelectorAll('p').forEach((el: any) => {\n      result.push(el)\n    })\n    return result.sort((a: any, b: any) => a.offsetTop > b.offsetTop)\n  }\n\n  function handleScroll(e: Event) {\n    const { current } = textContainerRef\n    if (current) {\n      const percent = getPercentOfScroll()\n      setCurrenPositionPercent(percent.toFixed(2))\n      setNumberOfCurrentPage(getNumberOfCurrentPage())\n      dfunc(() => {\n        const onScreen =\n          hightLightElementsOnScreen(current, elementsForHightlight) || []\n        updateBookPosition(onScreen[0])\n      })\n    }\n  }\n\n  function restoreScrollPoition() {\n    const currentBook: Book | undefined = state.find(\n      (book: Book) => book.id == bookId\n    )\n    if (currentBook) {\n      const toElement = document.querySelector(\n        `[data-id=\"${currentBook.positionElement}\"]`\n      )\n      toElement?.scrollIntoView()\n    }\n  }\n\n  function getPercentOfScroll() {\n    const { current } = textContainerRef\n    return current ? (current.scrollTop * 100) / current.scrollHeight : 0.0\n  }\n\n  function updateBookPosition(posElement: HTMLElement) {\n    if (posElement) {\n      const positionElement = posElement.getAttribute('data-id')\n      const payload = { bookId, positionElement }\n      dispatch({ type: 'update_book_position', payload })\n    }\n  }\n\n  function getPagesCount() {\n    const { current } = textContainerRef\n    return Math.round(current!.scrollHeight / current!.clientHeight)\n  }\n\n  function getNumberOfCurrentPage() {\n    const { current } = textContainerRef\n    return Math.round(current!.scrollTop / current!.clientHeight)\n  }\n\n  const handlePageChange = (direction: string) => () => {\n    const { current } = textContainerRef\n    if (current) {\n      const sign = direction === 'next' ? 1 : -1\n      current.scrollTop += sign * current.clientHeight\n    }\n  }\n\n  return (\n    <div className={`reader list-view ${wordsHighlight ? 'highlight' : ''}`}>\n      <div className=\"text-info\">\n        <Link className=\"home\" to=\"/\"></Link>\n        <div>\n          <Checkbox\n            label=\"highlight\"\n            value={wordsHighlight}\n            onChange={() => setWordsHighlight(!wordsHighlight)}\n          />\n        </div>\n        {/* <div className=\"book-name\">{currentBook?.name}</div> */}\n        <div className=\"\">{currenPositionPercent}%</div>\n        <div className=\"pages\">\n          {numberOfcurrentPage} / {pagesCount}\n        </div>\n      </div>\n      <div className=\"text-container\" ref={textContainerRef}></div>\n      <div className=\"prev-page\" onClick={handlePageChange('prev')}></div>\n      <div className=\"next-page\" onClick={handlePageChange('next')}></div>\n    </div>\n  )\n}\n","export async function convertFB2ToHtml(bookText: string) {\n  const parser = new DOMParser()\n  const el = parser.parseFromString(bookText, 'text/xml')\n  return fetch('reader.xsl')\n    .then((res) => res.text())\n    .then((str) => new window.DOMParser().parseFromString(str, 'text/xml'))\n    .then((xsl: any) => {\n      const xsltProcessor = new XSLTProcessor()\n      xsltProcessor.importStylesheet(xsl)\n      return xsltProcessor.transformToDocument(el)\n    })\n}\n","import React, { useCallback } from 'react'\nimport { getBookList, storeBook, updateBook } from '../uitls/database'\nimport { convertFB2ToHtml } from '../uitls/converter'\nimport { Book } from '../types'\n\nconst initialBooksState: Book[] = []\nexport type AppState = typeof initialBooksState\n\nexport default function useBooksReducer() {\n  const memoizedReducer = useCallback(\n    (state, action) => appReducer(state, action),\n    []\n  )\n  const [state, dispatch] = React.useReducer(memoizedReducer, initialBooksState)\n  function appReducer(state: AppState, action: any) {\n    switch (action.type) {\n      case 'set_books_list': {\n        return action.payload\n      }\n\n      case 'add_book_to_list': {\n        return [...state, action.payload]\n      }\n\n      case 'fetch_books_list': {\n        getBookList().then((payload) =>\n          dispatch({ type: 'set_books_list', payload })\n        )\n        return state\n      }\n\n      case 'add_book': {\n        const { text, file } = action.payload\n        addBookToDB(text, file).then((payload) =>\n          dispatch({ type: 'add_book_to_list', payload })\n        )\n        return state\n      }\n\n      case 'update_book_position': {\n        const { bookId, positionElement } = action.payload\n        updateBook(bookId, { positionElement })\n        return state.map((book) => {\n          if (book.id === bookId) {\n            return { ...book, ...{ positionElement } }\n          }\n          return book\n        })\n      }\n    }\n    return state\n  }\n\n  return [state, dispatch]\n}\n\nasync function addBookToDB(text: string, file: File) {\n  const html = await convertFB2ToHtml(text)\n  return await storeBook(html.body.innerHTML, file)\n}\n","import React, { useEffect, useReducer, Dispatch } from 'react'\nimport './App.scss'\nimport Bookshelf from './components/bookshelf/Bookshelf'\nimport Reader from './components/reader/Reader'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport useBooksReducer, { AppState } from './store/BooksReducer'\n\nexport const StateContext = React.createContext<AppState>([])\nexport const DispatchContext = React.createContext<React.Dispatch<any>>(\n  (value: any) => {}\n)\n\nfunction App() {\n  const [state, dispatch] = useBooksReducer()\n  useEffect(() => {\n    dispatch({ type: 'fetch_books_list' })\n  }, [])\n\n  return (\n    <StateContext.Provider value={state}>\n      <DispatchContext.Provider value={dispatch}>\n        <Router>\n          <Switch>\n            <Route path=\"/read/:bookId\">\n              <Reader />\n            </Route>\n            <Route path=\"/\">\n              <Bookshelf books={state} />\n            </Route>\n          </Switch>\n        </Router>\n      </DispatchContext.Provider>\n    </StateContext.Provider>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport { initDB } from './uitls/database'\nimport * as serviceWorker from './serviceWorker'\n\ninitDB()\n\nconst app = <App />\n\nReactDOM.render(app, document.getElementById('root'))\nserviceWorker.register();"],"sourceRoot":""}