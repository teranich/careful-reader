{"version":3,"sources":["components/controls/back.svg","components/controls/home.svg","components/controls/settings.svg","uitls/converter.ts","uitls/xsl.js","uitls/common.ts","uitls/cloud.ts","store/AppStore.ts","uitls/clientDB.ts","store/LibraryStore.ts","store/RemoteLibraryStore.ts","store/RootStore.ts","components/controls/AuthButtons.tsx","components/loading/Loading.tsx","components/common/Header.tsx","hooks/UseDoubleClick.ts","components/common/BookItem.tsx","pages/shelves/Shelve.tsx","pages/shelves/RemoteShelve.tsx","pages/shelves/common.tsx","pages/shelves/LocalShelve.tsx","pages/shelves/Shelves.tsx","pages/shelves/index.ts","uitls/styler.ts","pages/reader/Reader.tsx","pages/reader/index.ts","static/page1.jpg","static/page2.jpg","static/page3.jpg","pages/settings/Settings.tsx","components/Notifications.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["convertWithXSL","text","xsl","parser","DOMParser","xsltProcessor","XSLTProcessor","xml","parseFromString","parsedXsl","window","importStylesheet","transformToFragment","document","getBookPreviewInfo","fb2Book","rawMeta","meta","textContent","JSON","parse","cover","defaultEncoding","isDefaultEncoding","encoding","getTextEncoding","RegExp","exec","includes","readFile","file","a","reader","FileReader","Promise","resolve","reject","onload","event","result","target","onerror","error","readAsText","importScript","src","script","createElement","body","appendChild","async","loaded","loadGapi","then","gapi","load","auth2","catch","console","isGAPILoaded","googleDriveAPIDocument","scope","client","init","apiKey","process","clientId","discoveryDocs","signIn","getAuthInstance","signOut","isLoggedIn","isSignedIn","get","folderMIME","create","spaces","type","name","folderId","log","mimeType","parents","promisify","drive","files","resource","fields","response","find","query","q","ret","list","pageSize","pageToken","token","orderBy","concat","nextPageToken","download","fileId","alt","resp","remove","delete","status","getOrCreate","exist","length","upload","content","request","path","method","params","uploadType","stringify","gapiFn","options","err","createInDrive","findInDrive","getOrCreateInDrive","uploadInDrive","folder","createInAppFolder","findInAppFolder","getOrCreateInAppFolder","uploadOnAppFolder","appFolder","foder","AppStore","rootStore","messages","defaultLocale","locale","wordsHighlight","dynamicTextOrientation","pageColor","pageBackgroundColor","isClientLoaded","isUseImageCover","imageCover","setLocale","action","Object","keys","Error","setImageCoverAction","image","getLocaleMessages","toggleHightligting","value","toggleDynamicTextOrientation","setPageColor","toggleUseImageCover","setPageBackgroundColorAction","signInAction","cloud","signOutAction","makeAutoObservable","this","globalIntlCache","createIntlCache","createIntl","ru_messages","en_messages","en","ru","x","DB_INDEX_NAME","DB_STORE_NAME","dbPromise","openDB","upgrade","db","oldVersion","createObjectStore","keyPath","autoIncrement","txPromise","transaction","libraryDB","getBookMeta","id","getAllMeta","getAll","getBookText","addBook","timestamp","Date","now","tx","objectStore","add","book","done","updateBookMeta","bookId","updatedProps","store","oldBook","updatedBook","put","clear","LibraryStore","isAddingBookInProcess","isFetchingBooksInProcess","books","currentBook","fetchBooksListAction","isBookExist","addBookAction","rawBookText","converter","newBook","push","notification","info","syncBookAction","removeBookAction","bookIndex","indexOf","splice","updateBookPositionAction","positionElement","updateBookAction","bookProps","bookInStore","assign","openBookAction","all","prom","rawText","children","innerHTML","fetchBookTextAction","RemoteLibraryStore","isBooksLoading","isUploading","isDownloading","isBookRemoving","remoteFolderName","cloudAppFolder","cloudDrive","initLibrary","cloudFiles","contentPromises","map","fileMeta","uploadBookAction","currentFolder","currentFile","bookText","textFileId","updatedBookMeta","syncMetaAction","metaFileName","metaFileId","downloadBookAction","forceBookRemove","cloudMetaFile","cloudFile","allSettled","index","promises","RootStore","appStore","libraryStore","remoteLibraryStore","notifications","message","RootStoreContext","createContext","observer","useContext","Button","onClick","color","Switcher","styled","div","props","switch","loading","LoadingLine","showLoading","LinearProgress","TopHeightWorkaround","Title","Typography","useStyles","makeStyles","width","menuButton","marginRight","title","flexGrow","className","classes","useState","isOpen","setIsOpen","pathname","useLocation","headTitle","toggleDrawer","state","key","AppBar","Toolbar","position","IconButton","edge","aria-label","Fragment","Drawer","anchor","open","onClose","role","onKeyDown","List","to","ListItem","button","ListItemIcon","ListItemText","primary","Divider","variant","AuthButtons","useDoubleClick","ref","latency","onSingleClick","onDoubleClick","useEffect","clickRef","current","clickCount","handleClick","e","setTimeout","addEventListener","removeEventListener","Container","Paper","Image","img","BookItem","buttonRef","useRef","elevation","Spacer","Shelve","actions","dialogBookClickHandler","isBookDialogOpenned","setIsBookDialogOpenned","selectedBook","setSelectedBook","handleDialogClose","handleDefaultAction","Box","display","justifyContent","flexWrap","bookClickHandler","Dialog","fullWidth","DialogTitle","DialogContent","Grid","container","justify","spacing","item","xs","noWrap","DialogActions","handler","handleBookAction","RemoteBooksList","collectBook","theme","right","bottom","fab","input","AddBookButton","rest","useTheme","htmlFor","onChange","readFileContent","accept","Fab","component","LocalBooksList","history","useHistory","handleBookRead","Contaier","Content","FabsContainer","BottomMenu","BottomMenuHeight","Shelves","React","setValue","transitionDuration","enter","transitions","duration","enteringScreen","exit","leavingScreen","handleChangeIndex","fabs","icon","label","clickHandler","onChangeIndex","Zoom","in","timeout","style","transitionDelay","unmountOnExit","BottomNavigation","showLabels","BottomNavigationAction","getStyledElement","indexes","Array","sort","Math","random","split","word","join","wrapper","stylize","element","el","n","walk","createTreeWalker","NodeFilter","SHOW_TEXT","nextNode","textNodesUnder","forEach","textElement","styledTextElement","replaceWith","isOnScreen","screenContainerElement","viewportTop","scrollTop","viewportHeight","clientHeight","viewportBottom","top","offsetTop","height","PageCount","span","dfunc","func","waitFor","args","clearTimeout","debounce","fn","Reader","numberOfcurrentPage","setNumberOfCurrentPage","currenPositionPercent","setCurrenPositionPercent","pagesCount","setPagesCount","showControls","setShowControls","textContainerRef","elementsForHightlightRef","setLoading","queryParams","useParams","parseInt","motionStyle","setMotionStyle","getElementsForHightlight","getPagesCount","positions","querySelectorAll","o","getAttribute","restoreScrollPoition","openBook","handleScroll","useDebounce","dtoStyle","useEventListener","gamma","transform","bookTitle","b","elementsForHightlight","percent","scrollHeight","getPercentOfScroll","toFixed","round","getNumberOfCurrentPage","posElement","positionElementId","updateBookPosition","screenElement","allElements","onScreen","i","hightLightElementsOnScreen","positionId","toElement","querySelector","scrollIntoView","FormControlStyled","FormControl","CoverImage","intl","useIntl","handleInputChange","handlerName","handlerParams","checked","InputLabel","formatMessage","Select","labelId","MenuItem","FormLabel","FormControlLabel","control","Switch","PageCoverImage1","PageCoverImage2","PageCoverImage3","TextField","margin","Notifications","Notification","setOpen","handleClose","reason","removeNotification","Snackbar","anchorOrigin","vertical","horizontal","autoHideDuration","Alert","severity","App","fetchBooks","Provider","basename","exact","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","app","ReactDOM","render","getElementById","URL","href","origin","fetch","contentType","headers","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.a7d66cfd.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/back.adb63b87.svg\";","export default __webpack_public_path__ + \"static/media/home.d4a69c8f.svg\";","export default __webpack_public_path__ + \"static/media/settings.a753d163.svg\";","import { FB2_XSL, FB2_META, FB2_COVER_IMAGE_XSL } from './xsl'\r\n\r\nfunction convertWithXSL(text: string, xsl: string) {\r\n  const parser = new DOMParser()\r\n  const xsltProcessor = new XSLTProcessor()\r\n  const xml = parser.parseFromString(text, 'text/xml')\r\n  const parsedXsl = new window.DOMParser().parseFromString(xsl, 'text/xml')\r\n  xsltProcessor.importStylesheet(parsedXsl)\r\n  return xsltProcessor.transformToFragment(xml, document)\r\n}\r\n\r\nexport function getBookPreviewInfo(fb2Book: string) {\r\n  const rawMeta = convertWithXSL(fb2Book, FB2_META)\r\n  const meta = rawMeta.textContent ? JSON.parse(rawMeta.textContent) : {}\r\n  const rawCover = convertWithXSL(fb2Book, FB2_COVER_IMAGE_XSL)\r\n  const cover = rawCover.textContent\r\n  return { meta, cover }\r\n}\r\n\r\nexport function parseToInnerBook(fb2Book: string) {\r\n  const body = convertWithXSL(fb2Book, FB2_XSL)\r\n  return body.children[0].innerHTML || ''\r\n}\r\n\r\nexport const defaultEncoding = 'utf8'\r\n\r\nexport const isDefaultEncoding = (encoding: string) =>\r\n  encoding === defaultEncoding\r\n\r\nexport function getTextEncoding(text: string) {\r\n  const VRegExp = new RegExp(/<\\?xml[^]+?>/gi)\r\n  const testString = (VRegExp.exec(text) || [])[0] || ''\r\n\r\n  if (testString.includes('windows-1251')) return 'windows-1251'\r\n  return defaultEncoding\r\n}\r\n","const FB2_COVER_IMAGE_XSL = `<?xml version=\"1.0\"?>\r\n<xsl:stylesheet\r\n    version=\"1.0\"\r\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\r\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r\n    xmlns:fb=\"http://www.gribuser.ru/xml/fictionbook/2.0\">\r\n    <xsl:output method=\"text\" omit-xml-declaration=\"yes\" indent=\"no\" encoding=\"UTF-8\"/>\r\n    <xsl:template match=\"/*\">\r\n    <xsl:for-each select=\"fb:description/fb:title-info/fb:coverpage/fb:image\">\r\n        <xsl:call-template name=\"image\"/>\r\n    </xsl:for-each>\r\n    </xsl:template>\r\n    <xsl:template match=\"fb:image\" name=\"image\">\r\n        <xsl:choose>\r\n            <xsl:when test=\"starts-with(@xlink:href,'#')\">\r\n                <xsl:text>data:</xsl:text>\r\n                <xsl:variable name=\"href\" select=\"substring-after(@xlink:href,'#')\"/>\r\n                <xsl:value-of select=\"//fb:binary[@id=$href]/@content-type\" disable-output-escaping=\"yes\"/><xsl:text>;base64,</xsl:text>\r\n                <xsl:value-of select=\"//fb:binary[@id=$href]\" disable-output-escaping=\"yes\"/>\r\n            </xsl:when>\r\n            <xsl:otherwise>\r\n                <xsl:attribute name=\"src\">\r\n                    <xsl:value-of select=\"@xlink:href\"/>\r\n                </xsl:attribute>\r\n            </xsl:otherwise>\r\n        </xsl:choose>\r\n    </xsl:template>\r\n</xsl:stylesheet>`\r\n\r\nconst FB2_XSL = `<?xml version=\"1.0\"?>\r\n<xsl:stylesheet\r\n        version=\"3.0\"\r\n        xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\r\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r\n        xmlns:fb=\"http://www.gribuser.ru/xml/fictionbook/2.0\"\r\n        >\r\n    <xsl:output\r\n            media-type=\"text/html\"\r\n            method=\"html\"\r\n            encoding=\"utf-8\"\r\n            omit-xml-declaration=\"yes\"\r\n            doctype-public=\"HTML5\"\r\n            />\r\n\r\n    <xsl:key name=\"note-link\" match=\"fb:section\" use=\"@id\"/>\r\n    <xsl:template match=\"/*\">\r\n        <div class=\"text\">\r\n            <xsl:for-each select=\"fb:description/fb:title-info/fb:coverpage/fb:image\">\r\n                <xsl:call-template name=\"image\"/>\r\n            </xsl:for-each>\r\n\r\n            <xsl:for-each select=\"fb:description/fb:title-info/fb:annotation\">\r\n                <section class=\"text-annotation\">\r\n                    <xsl:call-template name=\"annotation\"/>\r\n                </section>\r\n            </xsl:for-each>\r\n\r\n            <!--<navMap style=\"display: none;\">-->\r\n                <!--<xsl:apply-templates select=\"fb:body\" mode=\"toc\"/>-->\r\n            <!--</navMap>-->\r\n\r\n\r\n            <xsl:for-each select=\"fb:body\">\r\n                <xsl:if test=\"position() != 1\">\r\n                    <div class=\"separator\"></div>\r\n                </xsl:if>\r\n\r\n                <!--<xsl:if test=\"not(fb:title) and @name\">-->\r\n                    <!--<h4 align=\"center\">-->\r\n                        <!--<xsl:value-of select=\"@name\"/>-->\r\n                    <!--</h4>-->\r\n                <!--</xsl:if>-->\r\n\r\n                <div class=\"text-wrapper\">\r\n                    <xsl:apply-templates/>\r\n                </div>\r\n\r\n            </xsl:for-each>\r\n        </div>\r\n    </xsl:template>\r\n    <!-- author template -->\r\n    <xsl:template name=\"author\">\r\n        <xsl:value-of select=\"fb:first-name\"/>\r\n        <xsl:text disable-output-escaping=\"no\">&#032;</xsl:text>\r\n        <xsl:value-of select=\"fb:middle-name\"/>&#032;\r\n        <xsl:text disable-output-escaping=\"no\">&#032;</xsl:text>\r\n        <xsl:value-of select=\"fb:last-name\"/>\r\n        <br/>\r\n    </xsl:template>\r\n    <!-- secuence template -->\r\n    <xsl:template name=\"sequence\">\r\n        <xsl:value-of select=\"@name\"/>\r\n        <xsl:if test=\"@number\">\r\n            <xsl:text disable-output-escaping=\"no\">,&#032;#</xsl:text>\r\n            <xsl:value-of select=\"@number\"/>\r\n        </xsl:if>\r\n        <xsl:if test=\"fb:sequence\">\r\n            <ul>\r\n                <xsl:for-each select=\"fb:sequence\">\r\n                    <xsl:call-template name=\"sequence\"/>\r\n                </xsl:for-each>\r\n            </ul>\r\n        </xsl:if>\r\n    </xsl:template>\r\n    <!-- toc template -->\r\n    <xsl:template match=\"fb:section|fb:body\" mode=\"toc\">\r\n        <xsl:choose>\r\n            <xsl:when test=\"name()='body' and position()=1 and not(fb:title)\">\r\n                <xsl:apply-templates select=\"fb:section\" mode=\"toc\"/>\r\n            </xsl:when>\r\n            <xsl:otherwise>\r\n                <navPoint>\r\n                    <navLabel>\r\n                        <text>\r\n                            <xsl:value-of select=\"normalize-space(fb:title | @name)\"/>\r\n                        </text>\r\n                    </navLabel>\r\n                    <content src=\"#TOC_{generate-id()}\"></content>\r\n                    <!--<xsl:value-of select=\"normalize-space(fb:title | //fb:body/@name)\"/>-->\r\n                    <!--<xsl:value-of select=\"normalize-space(fb:body[@name == 'notes']/@name | fb:body/title)\"/>-->\r\n\r\n                    <!-- fb:body[@name = 'notes'] -->\r\n                    <xsl:if test=\"fb:section\">\r\n                        <navPoint>\r\n                            <xsl:apply-templates select=\"fb:section\" mode=\"toc\"/>\r\n                        </navPoint>\r\n                    </xsl:if>\r\n                </navPoint>\r\n            </xsl:otherwise>\r\n        </xsl:choose>\r\n    </xsl:template>\r\n    <!-- description -->\r\n    <xsl:template match=\"fb:description\">\r\n        <xsl:apply-templates/>\r\n    </xsl:template>\r\n    <!-- body -->\r\n    <xsl:template match=\"fb:body\">\r\n        <div>\r\n            <xsl:apply-templates/>\r\n        </div>\r\n    </xsl:template>\r\n\r\n    <xsl:template match=\"fb:section\">\r\n        <section>\r\n            <xsl:attribute name=\"class\">\r\n                <xsl:text>default-section</xsl:text>\r\n                <xsl:if test=\"starts-with(translate(fb:title, 'ГЛАВА', 'глава'), 'глава')\">\r\n                    <xsl:text> chapter</xsl:text>\r\n                </xsl:if>\r\n            </xsl:attribute>\r\n            <a name=\"TOC_{generate-id()}\"></a>\r\n            <xsl:if test=\"@id\">\r\n                <xsl:element name=\"a\">\r\n                    <xsl:attribute name=\"name\">\r\n                        <xsl:value-of select=\"@id\"/>\r\n                    </xsl:attribute>\r\n                </xsl:element>\r\n            </xsl:if>\r\n            <xsl:apply-templates/>\r\n        </section>\r\n    </xsl:template>\r\n    <xsl:template match=\"fb:body[@name='notes']//fb:section\">\r\n        <div>\r\n            <xsl:if test=\"@id\">\r\n                <xsl:attribute name=\"class\">\r\n                    <xsl:value-of select=\"'annotation'\"/>\r\n                </xsl:attribute>\r\n            </xsl:if>\r\n            <a name=\"TOC_{generate-id()}\"></a>\r\n            <xsl:if test=\"@id\">\r\n                <xsl:element name=\"a\">\r\n                    <xsl:attribute name=\"name\">\r\n                        <xsl:value-of select=\"@id\"/>\r\n                    </xsl:attribute>\r\n                </xsl:element>\r\n            </xsl:if>\r\n            <xsl:apply-templates/>\r\n        </div>\r\n    </xsl:template>\r\n\r\n\r\n    <!-- section/title -->\r\n    <xsl:template match=\"fb:section/fb:title|fb:poem/fb:title\">\r\n        <xsl:choose>\r\n            <xsl:when test=\"count(ancestor::node()) &lt; 9\">\r\n                <xsl:element name=\"{concat('h',count(ancestor::node())-3)}\">\r\n                    <a name=\"TOC_{generate-id()}\"></a>\r\n                    <xsl:if test=\"@id\">\r\n                        <xsl:element name=\"a\">\r\n                            <xsl:attribute name=\"name\">\r\n                                <xsl:value-of select=\"@id\"/>\r\n                            </xsl:attribute>\r\n                        </xsl:element>\r\n                    </xsl:if>\r\n                    <xsl:apply-templates/>\r\n                </xsl:element>\r\n            </xsl:when>\r\n            <xsl:otherwise>\r\n                <xsl:element name=\"h6\">\r\n                    <xsl:if test=\"@id\">\r\n                        <xsl:element name=\"a\">\r\n                            <xsl:attribute name=\"name\">\r\n                                <xsl:value-of select=\"@id\"/>\r\n                            </xsl:attribute>\r\n                        </xsl:element>\r\n                    </xsl:if>\r\n                    <xsl:apply-templates/>\r\n                </xsl:element>\r\n            </xsl:otherwise>\r\n        </xsl:choose>\r\n    </xsl:template>\r\n    <!-- section/title -->\r\n    <xsl:template match=\"fb:body/fb:title\">\r\n        <!--<h1 style=\"display: none;\">-->\r\n            <!--<xsl:apply-templates mode=\"title\"/>-->\r\n        <!--</h1>-->\r\n    </xsl:template>\r\n    <xsl:template match=\"fb:body[@name='notes']/fb:title\">\r\n        <h1>\r\n            <xsl:apply-templates mode=\"title\"/>\r\n        </h1>\r\n    </xsl:template>\r\n\r\n    <xsl:template match=\"fb:title/fb:p\">\r\n        <xsl:apply-templates/>\r\n        <xsl:text disable-output-escaping=\"no\">&#032;</xsl:text>\r\n        <br/>\r\n    </xsl:template>\r\n    <!-- subtitle -->\r\n    <xsl:template match=\"fb:subtitle\">\r\n        <xsl:if test=\"@id\">\r\n            <xsl:element name=\"a\">\r\n                <xsl:attribute name=\"name\">\r\n                    <xsl:value-of select=\"@id\"/>\r\n                </xsl:attribute>\r\n            </xsl:element>\r\n        </xsl:if>\r\n        <h5>\r\n            <xsl:apply-templates/>\r\n        </h5>\r\n    </xsl:template>\r\n    <!-- p -->\r\n    <xsl:template match=\"fb:p\">\r\n        <!--<xsl:if test\"preceding-sibling::*[1][name()] != 'fb:image'\">-->\r\n            <p data-id=\"{position()}-{last()}}\">\r\n                <xsl:if test=\"@id\">\r\n                    <xsl:element name=\"a\">\r\n                        <xsl:attribute name=\"name\">\r\n                            <xsl:value-of select=\"@id\"/>\r\n                        </xsl:attribute>\r\n                    </xsl:element>\r\n                </xsl:if>\r\n                <xsl:apply-templates/>\r\n            </p>\r\n        <!--</xsl:if>-->\r\n    </xsl:template>\r\n    <!-- strong -->\r\n    <xsl:template match=\"fb:strong\">\r\n        <b>\r\n            <xsl:apply-templates/>\r\n        </b>\r\n    </xsl:template>\r\n    <!-- emphasis -->\r\n    <xsl:template match=\"fb:emphasis\">\r\n        <i>\r\n            <xsl:apply-templates/>\r\n        </i>\r\n    </xsl:template>\r\n    <!-- style -->\r\n    <xsl:template match=\"fb:style\">\r\n        <span class=\"{@name}\">\r\n            <xsl:apply-templates/>\r\n        </span>\r\n    </xsl:template>\r\n    <!-- empty-line -->\r\n    <xsl:template match=\"fb:empty-line\">\r\n        <xsl:if test=\"following-sibling::*[1] != fb:image\">\r\n            <br/>\r\n        </xsl:if>\r\n    </xsl:template>\r\n    <!-- link -->\r\n    <xsl:template match=\"fb:a\">\r\n        <xsl:choose>\r\n            <xsl:when test=\"starts-with(@xlink:href,'#')\">\r\n                <xsl:element name=\"a\">\r\n                    <xsl:attribute name=\"class\">\r\n                        <xsl:value-of select=\"'footnote'\"/>\r\n                    </xsl:attribute>\r\n                    <xsl:attribute name=\"href\">\r\n                        <xsl:value-of select=\"@xlink:href\"/>\r\n                    </xsl:attribute>\r\n                    <xsl:attribute name=\"title\">\r\n                        <xsl:value-of select=\"key('note-link',substring-after(@xlink:href,'#'))/fb:p\"/>\r\n                    </xsl:attribute>\r\n                    <xsl:choose>\r\n                        <xsl:when test=\"(@type) = 'note'\">\r\n                            <sup>\r\n                                <xsl:apply-templates/>\r\n                            </sup>\r\n                        </xsl:when>\r\n                        <xsl:otherwise>\r\n                            <xsl:apply-templates/>\r\n                        </xsl:otherwise>\r\n                    </xsl:choose>\r\n                </xsl:element>\r\n            </xsl:when>\r\n            <xsl:otherwise>\r\n                <xsl:element name=\"span\">\r\n                    <xsl:choose>\r\n                        <xsl:when test=\"(@type) = 'note'\">\r\n                            <sup>\r\n                                <xsl:apply-templates/>\r\n                            </sup>\r\n                        </xsl:when>\r\n                        <xsl:otherwise>\r\n                            <xsl:apply-templates/>\r\n                        </xsl:otherwise>\r\n                    </xsl:choose>\r\n                </xsl:element>\r\n            </xsl:otherwise>\r\n        </xsl:choose>\r\n    </xsl:template>\r\n    <!-- annotation -->\r\n    <xsl:template name=\"annotation\">\r\n        <xsl:if test=\"@id\">\r\n            <xsl:element name=\"a\">\r\n                <xsl:attribute name=\"name\">\r\n                    <xsl:value-of select=\"@id\"/>\r\n                </xsl:attribute>\r\n            </xsl:element>\r\n        </xsl:if>\r\n        <xsl:apply-templates/>\r\n    </xsl:template>\r\n    <!-- epigraph -->\r\n    <xsl:template match=\"fb:epigraph\">\r\n        <blockquote class=\"epigraph\">\r\n            <xsl:if test=\"@id\">\r\n                <xsl:element name=\"a\">\r\n                    <xsl:attribute name=\"name\">\r\n                        <xsl:value-of select=\"@id\"/>\r\n                    </xsl:attribute>\r\n                </xsl:element>\r\n            </xsl:if>\r\n            <xsl:apply-templates/>\r\n        </blockquote>\r\n    </xsl:template>\r\n    <!-- epigraph/text-author -->\r\n    <xsl:template match=\"fb:epigraph/fb:text-author\">\r\n        <blockquote class=\"author\">\r\n            <i>\r\n                <xsl:apply-templates/>\r\n            </i>\r\n        </blockquote>\r\n    </xsl:template>\r\n    <!-- cite -->\r\n    <xsl:template match=\"fb:cite\">\r\n        <blockquote>\r\n            <xsl:if test=\"@id\">\r\n                <xsl:element name=\"a\">\r\n                    <xsl:attribute name=\"name\">\r\n                        <xsl:value-of select=\"@id\"/>\r\n                    </xsl:attribute>\r\n                </xsl:element>\r\n            </xsl:if>\r\n            <xsl:apply-templates/>\r\n        </blockquote>\r\n    </xsl:template>\r\n    <!-- cite/text-author -->\r\n    <xsl:template match=\"fb:text-author\">\r\n        <blockquote>\r\n            <i>\r\n                <xsl:apply-templates/>\r\n            </i>\r\n        </blockquote>\r\n    </xsl:template>\r\n    <!-- date -->\r\n    <xsl:template match=\"fb:date\">\r\n        <xsl:choose>\r\n            <xsl:when test=\"not(@value)\">\r\n                &#160;&#160;&#160;\r\n                <xsl:apply-templates/>\r\n                <br/>\r\n            </xsl:when>\r\n            <xsl:otherwise>\r\n                &#160;&#160;&#160;<xsl:value-of select=\"@value\"/>\r\n                <br/>\r\n            </xsl:otherwise>\r\n        </xsl:choose>\r\n    </xsl:template>\r\n    <!-- poem -->\r\n    <xsl:template match=\"fb:poem\">\r\n        <blockquote>\r\n            <xsl:if test=\"@id\">\r\n                <xsl:element name=\"a\">\r\n                    <xsl:attribute name=\"name\">\r\n                        <xsl:value-of select=\"@id\"/>\r\n                    </xsl:attribute>\r\n                </xsl:element>\r\n            </xsl:if>\r\n            <xsl:apply-templates/>\r\n        </blockquote>\r\n    </xsl:template>\r\n\r\n    <!-- stanza -->\r\n    <xsl:template match=\"fb:stanza\">\r\n        <xsl:apply-templates/>\r\n        <br/>\r\n    </xsl:template>\r\n    <!-- v -->\r\n    <xsl:template match=\"fb:v\">\r\n        <xsl:if test=\"@id\">\r\n            <xsl:element name=\"a\">\r\n                <xsl:attribute name=\"name\">\r\n                    <xsl:value-of select=\"@id\"/>\r\n                </xsl:attribute>\r\n            </xsl:element>\r\n        </xsl:if>\r\n        <xsl:apply-templates/>\r\n        <br/>\r\n    </xsl:template>\r\n    <!-- image -->\r\n    <xsl:template match=\"fb:image\" name=\"image\">\r\n        <div>\r\n            <xsl:choose>\r\n                <xsl:when test=\"ancestor::fb:coverpage\">\r\n                    <xsl:attribute name=\"class\">\r\n                        <xsl:value-of select=\"'text-cover'\"/>\r\n                    </xsl:attribute>\r\n                </xsl:when>\r\n                <xsl:otherwise>\r\n                    <xsl:attribute name=\"class\">\r\n                        <xsl:text>default image</xsl:text>\r\n                    </xsl:attribute>\r\n                </xsl:otherwise>\r\n            </xsl:choose>\r\n            <div class=\"image-wrapper\">\r\n                <img>\r\n                    <xsl:choose>\r\n                        <xsl:when test=\"starts-with(@xlink:href,'#')\">\r\n                            <xsl:attribute name=\"src\">\r\n                                <xsl:text>data:</xsl:text>\r\n                                <xsl:variable name=\"href\" select=\"substring-after(@xlink:href,'#')\"/>\r\n                                <set variable=\"href\" expression=\"substring-after(@xlink:href,'#')\"/>\r\n                                <xsl:value-of select=\"//fb:binary[@id=$href]/@content-type\" disable-output-escaping=\"yes\"/><xsl:text>;base64,</xsl:text>\r\n                                <!--<xsl:value-of select=\"substring-after(@xlink:href,'#')\"/>-->\r\n                                <xsl:value-of select=\"//fb:binary[@id=$href]\" disable-output-escaping=\"yes\"/>\r\n                            </xsl:attribute>\r\n\r\n                        </xsl:when>\r\n                        <xsl:otherwise>\r\n                            <xsl:attribute name=\"src\">\r\n                                <xsl:value-of select=\"@xlink:href\"/>\r\n                            </xsl:attribute>\r\n                        </xsl:otherwise>\r\n                    </xsl:choose>\r\n                </img>\r\n            </div>\r\n            <xsl:if test=\"following-sibling::node()[1]/fb:emphasis\">\r\n                <div class=\"image-annotation\">\r\n                    <xsl:apply-templates select=\"following-sibling::fb:p[1]\"/>\r\n                </div>\r\n            </xsl:if>\r\n        </div>\r\n    </xsl:template>\r\n</xsl:stylesheet>`\r\n\r\nconst FB2_META = `<?xml version=\"1.0\"?>\r\n<xsl:stylesheet\r\n    version=\"3.0\"\r\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\r\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\r\n    xmlns:fb=\"http://www.gribuser.ru/xml/fictionbook/2.0\">\r\n    <xsl:output method=\"text\" omit-xml-declaration=\"yes\" indent=\"no\" encoding=\"UTF-8\"/>\r\n<xsl:template match=\"/*\">{<xsl:for-each select=\"fb:description/fb:title-info\">\t\r\n    \"title\": \"<xsl:value-of select=\"fb:book-title\" />\",\r\n    \"genre\": \"<xsl:value-of select=\"fb:genre\" />\",\r\n    \"author\": {\r\n        \"firstName\": \"<xsl:value-of select=\"fb:author/fb:first-name\" />\",\r\n        \"lastName\": \"<xsl:value-of select=\"fb:author/fb:last-name\" />\"\r\n    },\r\n    \"date\": \"<xsl:value-of select=\"fb:date\" />\",\r\n    \"keywords\": \"<xsl:value-of select=\"fb:keywords\" />\",\r\n    \"lang\": \"<xsl:value-of select=\"fb:lang\" />\"\r\n</xsl:for-each>}</xsl:template>\r\n</xsl:stylesheet>`\r\n\r\nexport { FB2_XSL, FB2_META, FB2_COVER_IMAGE_XSL }\r\n","import { BookList } from '../types'\r\nimport {\r\n  defaultEncoding,\r\n  getTextEncoding,\r\n  isDefaultEncoding,\r\n} from './converter'\r\n\r\nexport async function getBooksList(): Promise<BookList> {\r\n  return fetch('db.json').then((resp) => resp.json())\r\n}\r\n\r\nexport async function getBook(filePath: string): Promise<string> {\r\n  return fetch(filePath).then((resp) => resp.text())\r\n}\r\n\r\nexport async function readFile(\r\n  file: File,\r\n  encoding: string = defaultEncoding\r\n): Promise<string> {\r\n  const reader = new FileReader()\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = (event) => {\r\n      const result = event?.target?.result\r\n      if (result && typeof result === 'string') {\r\n        return resolve(result)\r\n      }\r\n      return reject('')\r\n    }\r\n    reader.onerror = (error) => reject('error reading file' + error)\r\n\r\n    reader.readAsText(file, encoding)\r\n  })\r\n}\r\nexport async function readFileContent(file: File): Promise<string> {\r\n  const text = await readFile(file)\r\n  const encoding = getTextEncoding(text)\r\n  if (isDefaultEncoding(encoding)) return text\r\n  return await readFile(file, encoding)\r\n}\r\n\r\nexport const debounce = <F extends (...args: any[]) => any>(\r\n  func: F,\r\n  waitFor: number\r\n) => {\r\n  let timeout: ReturnType<typeof setTimeout> | null = null\r\n\r\n  const debounced = (...args: Parameters<F>) => {\r\n    if (timeout !== null) {\r\n      clearTimeout(timeout)\r\n      timeout = null\r\n    }\r\n    timeout = setTimeout(() => func(...args), waitFor)\r\n  }\r\n\r\n  return debounced as (...args: Parameters<F>) => ReturnType<F>\r\n}\r\n\r\nexport function importScript(src: string) {\r\n  return new Promise((resolve, reject) => {\r\n    const script = document.createElement('script')\r\n    document.body.appendChild(script)\r\n    script.onload = resolve\r\n    script.onerror = reject\r\n    script.async = true\r\n    script.src = src\r\n    return src;\r\n  })\r\n}\r\n","import { importScript } from './common'\r\n\r\ninterface Files {\r\n  id: string\r\n}\r\n\r\nlet loaded = false\r\nexport async function loadGapi() {\r\n  if (loaded) return true\r\n  return importScript('https://apis.google.com/js/client:platform.js')\r\n    .then(() => {\r\n      return new Promise((resolve, reject) =>\r\n        window.gapi.load('auth2', () => resolve(window.gapi.auth2))\r\n      )\r\n    })\r\n    .then(() => {\r\n      loaded = true\r\n      return loaded\r\n    })\r\n    .catch(() => {\r\n      console.error('google api is not loaded')\r\n    })\r\n}\r\n\r\nlet isGAPILoaded = false\r\nconst googleDriveAPIDocument =\r\n  'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest'\r\nconst scope =\r\n  'https://www.googleapis.com/auth/drive.appfolder https://www.googleapis.com/auth/drive'\r\nexport async function load() {\r\n  if (isGAPILoaded) return\r\n  await loadGapi()\r\n  return new Promise((resolve, reject) => {\r\n    return window.gapi.client\r\n      .init({\r\n        apiKey: process.env.REACT_APP_GOOGLE_API_KEY,\r\n        clientId: process.env.REACT_APP_GOOGLE_CLIENT_ID,\r\n        discoveryDocs: [googleDriveAPIDocument],\r\n        scope: scope,\r\n      })\r\n      .then(() => (isGAPILoaded = true))\r\n      .then(resolve)\r\n      .catch(reject)\r\n  })\r\n}\r\n\r\nexport async function signIn() {\r\n  await load()\r\n  try {\r\n    return window.gapi.auth2.getAuthInstance().signIn()\r\n  } catch (e) {\r\n    console.error('error in signIn', e)\r\n  }\r\n}\r\n\r\nexport async function signOut() {\r\n  await load()\r\n  try {\r\n    return window.gapi.auth2.getAuthInstance().signOut()\r\n  } catch (e) {\r\n    console.error('error in signOut', e)\r\n  }\r\n}\r\n\r\nexport async function isLoggedIn() {\r\n  await load()\r\n  try {\r\n    return (\r\n      window.gapi.auth2.getAuthInstance() &&\r\n      window.gapi.auth2.getAuthInstance().isSignedIn.get()\r\n    )\r\n  } catch (e) {\r\n    console.error('error in isLoggedIn', e)\r\n    return false\r\n  }\r\n}\r\nconst folderMIME = 'application/vnd.google-apps.folder'\r\nconst fileMIME = 'text/plain'\r\n\r\nconst create = (spaces: string) => (type: string) => async (\r\n  name: string,\r\n  folderId?: string\r\n) => {\r\n  console.log(spaces, type, name, folderId)\r\n  const mimeType = type === 'folder' ? folderMIME : fileMIME\r\n  const parents = folderId ? [folderId] : spaces === 'drive' ? [] : [spaces]\r\n  const response = await promisify(gapi.client.drive.files.create, {\r\n    resource: {\r\n      name,\r\n      mimeType,\r\n      parents,\r\n    },\r\n    fields: '*',\r\n  })\r\n  return response.result\r\n}\r\n\r\nconst find = (spaces: string) => (type: string) => async (query: string) => {\r\n  const mimeType =\r\n    type === 'folder'\r\n      ? `and mimeType = '${folderMIME}'`\r\n      : `and not mimeType = '${folderMIME}'`\r\n  const q = `${query} ${mimeType}`\r\n  let ret: any = []\r\n  try {\r\n    let token\r\n    do {\r\n      const response: any = await promisify(\r\n        window.gapi.client.drive.files.list,\r\n        {\r\n          spaces,\r\n          fields: '*',\r\n          pageSize: 100,\r\n          pageToken: token,\r\n          orderBy: 'createdTime',\r\n          q,\r\n        }\r\n      )\r\n      ret = ret.concat(response.result.files)\r\n      token = response.result.nextPageToken\r\n    } while (token)\r\n\r\n    return ret\r\n  } catch (e) {\r\n    console.error('can`t list items in drive with query: ', query, e)\r\n  }\r\n}\r\n\r\nconst download = async (fileId: string) => {\r\n  const resp = await promisify(gapi.client.drive.files.get, {\r\n    fileId: fileId,\r\n    alt: 'media',\r\n  })\r\n\r\n  return resp.body\r\n}\r\nconst remove = async (fileId: string) => {\r\n  try {\r\n    await promisify(gapi.client.drive.files.delete, {\r\n      fileId: fileId,\r\n    })\r\n    return true\r\n  } catch (err) {\r\n    if (err.status === 404) {\r\n      return false\r\n    }\r\n    throw err\r\n  }\r\n}\r\n\r\nconst getOrCreate = (spaces: string) => (type: string) => async (\r\n  q: string,\r\n  name: string,\r\n  folderId?: string\r\n) => {\r\n  const exist = await find(spaces)(type)(q)\r\n  return exist.length ? exist : [await create(spaces)(type)(name, folderId)]\r\n}\r\n\r\nconst upload = (spaces: string) => async (fileId: string, content: string) => {\r\n  try {\r\n    const response: any = await promisify(gapi.client.request, {\r\n      spaces: spaces === 'drive' ? [] : [spaces],\r\n      path: `/upload/drive/v3/files/${fileId}`,\r\n      method: 'PATCH',\r\n      params: { uploadType: 'media' },\r\n      body: typeof content === 'string' ? content : JSON.stringify(content),\r\n    })\r\n    return response.result\r\n  } catch (e) {\r\n    console.error('can`t upload file with: ', fileId, content, e)\r\n  }\r\n}\r\n\r\nfunction promisify(\r\n  gapiFn: any,\r\n  options: any\r\n): Promise<gapi.client.Response<Files>> {\r\n  return new Promise((resolve, reject) => {\r\n    return gapiFn(options).then(\r\n      (resp: any) => {\r\n        if (resp && (resp.status < 200 || resp.status > 299)) {\r\n          console.error('GAPI call returned bad status', resp)\r\n          reject(resp)\r\n        } else {\r\n          resolve(resp)\r\n        }\r\n      },\r\n      (err: any) => {\r\n        return reject(err)\r\n      }\r\n    )\r\n  })\r\n}\r\n\r\nconst createInDrive = create('drive')\r\nconst findInDrive = find('drive')\r\nconst getOrCreateInDrive = getOrCreate('drive')\r\nconst uploadInDrive = upload('drive')\r\nexport const drive = {\r\n  getOrCreate: {\r\n    folder: getOrCreateInDrive('folder'),\r\n    file: getOrCreateInDrive('file'),\r\n  },\r\n  create: {\r\n    folder: createInDrive('folder'),\r\n    file: createInDrive('file'),\r\n  },\r\n  find: {\r\n    folder: findInDrive('folder'),\r\n    file: findInDrive('file'),\r\n  },\r\n  upload: uploadInDrive,\r\n  download,\r\n  remove,\r\n}\r\n\r\nconst createInAppFolder = create('appDataFolder')\r\nconst findInAppFolder = find('appDataFolder')\r\nconst getOrCreateInAppFolder = getOrCreate('appDataFolder')\r\nconst uploadOnAppFolder = upload('appDataFolder')\r\nexport const appFolder = {\r\n  getOrCreate: {\r\n    foder: getOrCreateInAppFolder('folder'),\r\n    file: getOrCreateInAppFolder('file'),\r\n  },\r\n  create: {\r\n    folder: createInAppFolder('folder'),\r\n    file: createInAppFolder('file'),\r\n  },\r\n  find: {\r\n    folder: find('folder'),\r\n    file: findInAppFolder('file'),\r\n  },\r\n  upload: uploadOnAppFolder,\r\n  download,\r\n  remove,\r\n}\r\n","import { action, makeAutoObservable } from 'mobx'\r\nimport { createIntl, createIntlCache } from 'react-intl'\r\n\r\nimport en_messages from '../translations/locales/en.json'\r\nimport ru_messages from '../translations/locales/ru.json'\r\nimport * as cloud from '../uitls/cloud'\r\nimport { RootStore } from './RootStore'\r\n\r\nconst DEFAULT_LOCALE = 'en'\r\nexport default class AppStore {\r\n  rootStore: RootStore\r\n  messages: {\r\n    [key: string]: any\r\n  }\r\n  defaultLocale: string = DEFAULT_LOCALE\r\n  locale: string = DEFAULT_LOCALE\r\n  wordsHighlight: boolean = true\r\n  dynamicTextOrientation: boolean = false\r\n  pageColor: string = 'white'\r\n  pageBackgroundColor: string = '#0000'\r\n  isLoggedIn: boolean = false\r\n  isClientLoaded: boolean = false\r\n  isUseImageCover: boolean = true\r\n  imageCover: string = '1'\r\n\r\n  constructor(rootStore: RootStore) {\r\n    makeAutoObservable(this)\r\n    this.rootStore = rootStore\r\n    const globalIntlCache = createIntlCache()\r\n\r\n    createIntl({ locale: 'ru', messages: ru_messages }, globalIntlCache)\r\n    createIntl({ locale: 'en', messages: en_messages }, globalIntlCache)\r\n\r\n    this.defaultLocale = 'en'\r\n    this.messages = {\r\n      en: en_messages,\r\n      ru: ru_messages,\r\n    } as {\r\n      [key: string]: any\r\n    }\r\n\r\n    cloud.load().then((x) => {\r\n      this.isClientLoaded = true\r\n      cloud.isLoggedIn().then((isLoggedIn) => (this.isLoggedIn = isLoggedIn))\r\n    })\r\n  }\r\n\r\n  setLocale = action((locale: string) => {\r\n    if (Object.keys(this.messages).includes(locale)) {\r\n      this.locale = locale\r\n    } else {\r\n      throw Error('Unsupported locale')\r\n    }\r\n  })\r\n\r\n  setImageCoverAction = action((image: string) => (this.imageCover = image))\r\n\r\n  getLocaleMessages = action(() => {\r\n    const locale = this.locale\r\n    return this.messages[locale]\r\n  })\r\n\r\n  toggleHightligting = action((value: boolean) => {\r\n    this.wordsHighlight = value\r\n  })\r\n\r\n  toggleDynamicTextOrientation = action((value: boolean) => {\r\n    this.dynamicTextOrientation = value\r\n  })\r\n\r\n  setPageColor = action((value: string) => {\r\n    this.pageColor = value\r\n  })\r\n\r\n  toggleUseImageCover = action((value: boolean) => {\r\n    this.isUseImageCover = value\r\n  })\r\n\r\n  setPageBackgroundColorAction = action((value: string) => {\r\n    this.pageBackgroundColor = value\r\n  })\r\n\r\n  signInAction = action(async () => {\r\n    await cloud.signIn()\r\n    this.isLoggedIn = await cloud.isLoggedIn()\r\n  })\r\n\r\n  signOutAction = action(async () => {\r\n    await cloud.signOut()\r\n    this.isLoggedIn = await cloud.isLoggedIn()\r\n  })\r\n}\r\n","import { openDB, DBSchema } from 'idb'\r\nimport { Book } from '../types'\r\n\r\nconst DB_VERSION = 1\r\nconst DB_NAME = 'library'\r\nconst DB_INDEX_NAME = 'index'\r\nconst DB_STORE_NAME = 'books'\r\n\r\ninterface LibraryDB extends DBSchema {\r\n  [DB_INDEX_NAME]: {\r\n    key: number\r\n    value: Book\r\n  }\r\n  [DB_STORE_NAME]: {\r\n    key: number\r\n    value: string\r\n  }\r\n}\r\n\r\nconst dbPromise = openDB<LibraryDB>(DB_NAME, DB_VERSION, {\r\n  upgrade(db, oldVersion) {\r\n    if (oldVersion < 1) {\r\n      db.createObjectStore(DB_INDEX_NAME, { keyPath: 'id' })\r\n      db.createObjectStore(DB_STORE_NAME, { autoIncrement: true })\r\n    }\r\n  },\r\n})\r\n\r\nconst txPromise = async () =>\r\n  (await dbPromise).transaction([DB_INDEX_NAME, DB_STORE_NAME], 'readwrite')\r\n\r\nconst libraryDB = {\r\n  async getBookMeta(id: number) {\r\n    return (await dbPromise).get(DB_INDEX_NAME, id)\r\n  },\r\n  async getAllMeta() {\r\n    return (await dbPromise).getAll(DB_INDEX_NAME)\r\n  },\r\n  async getBookText(id: number): Promise<string> {\r\n    const result = await (await dbPromise).get(DB_STORE_NAME, id)\r\n    if (!result) {\r\n      throw Error(`can not find book ${id} in the locale db`)\r\n    } else {\r\n      return result\r\n    }\r\n  },\r\n  async addBook(meta: any, body: string = ''): Promise<Book> {\r\n    const timestamp = Date.now()\r\n    const tx = await txPromise()\r\n    const id = await tx.objectStore(DB_STORE_NAME).add(body)\r\n    const book: Book = { ...meta, id, timestamp }\r\n\r\n    await tx.objectStore(DB_INDEX_NAME).add(book)\r\n    await tx.done\r\n    return book\r\n  },\r\n  async updateBookMeta(bookId: number, updatedProps: any) {\r\n    const tx = await txPromise()\r\n    const store = tx.objectStore(DB_INDEX_NAME)\r\n    const oldBook = await store.get(bookId)\r\n    const updatedBook = { ...oldBook, ...updatedProps }\r\n    await store.put(updatedBook)\r\n    await tx.done\r\n    return updatedBook\r\n  },\r\n  async delete(bookId: number) {\r\n    const tx = await txPromise()\r\n    await tx.objectStore(DB_INDEX_NAME).delete(bookId)\r\n    await tx.objectStore(DB_STORE_NAME).delete(bookId)\r\n    await tx.done\r\n  },\r\n  async clear() {\r\n    const tx = await txPromise()\r\n    await tx.objectStore(DB_INDEX_NAME).clear()\r\n    await tx.objectStore(DB_STORE_NAME).clear()\r\n    await tx.done\r\n  },\r\n}\r\n\r\nexport default libraryDB\r\n","import { RootStore } from './RootStore'\r\nimport { action, makeAutoObservable } from 'mobx'\r\nimport libraryDB from '../uitls/clientDB'\r\nimport { BookList, Book } from '../types'\r\nimport * as converter from '../uitls/converter'\r\n\r\ntype TCurrentBook = null | {\r\n  info: Book\r\n  text: string\r\n  meta: any\r\n}\r\nexport class LibraryStore {\r\n  public isAddingBookInProcess = false\r\n  public isFetchingBooksInProcess = false\r\n\r\n  public books: BookList = []\r\n  public currentBook: TCurrentBook = null\r\n  private rootStore: RootStore\r\n\r\n  constructor(rootStore: RootStore) {\r\n    makeAutoObservable(this)\r\n    this.rootStore = rootStore\r\n  }\r\n  fetchBooksListAction = action(async () => {\r\n    this.isFetchingBooksInProcess = true\r\n    this.books = await libraryDB.getAllMeta()\r\n    this.isFetchingBooksInProcess = false\r\n  })\r\n\r\n  isBookExist = (name: string | undefined) =>\r\n    this.books.find((book: Book) => book.name === name)\r\n\r\n  addBookAction = action(async (rawBookText: string, name: string) => {\r\n    const { cover, meta } = converter.getBookPreviewInfo(rawBookText)\r\n    const newBook = {\r\n      name,\r\n      meta,\r\n      cover,\r\n    }\r\n\r\n    this.isAddingBookInProcess = true\r\n    const book = await libraryDB.addBook(newBook, rawBookText)\r\n    this.books.push(book)\r\n    this.isAddingBookInProcess = false\r\n    this.rootStore.notification.info('book has been added')\r\n  })\r\n\r\n  syncBookAction = action(async (meta: Book, body: string) => {\r\n    const book = await libraryDB.addBook(meta, body)\r\n    this.books.push(book)\r\n  })\r\n\r\n  removeBookAction = action(async (book: Book | null) => {\r\n    if (!book) return\r\n    await libraryDB.delete(book.id)\r\n    const bookIndex = this.books.indexOf(book)\r\n    this.books.splice(bookIndex, 1)\r\n    this.rootStore.notification.info('book has been removed')\r\n  })\r\n\r\n  updateBookPositionAction = action(\r\n    async (bookId: number, positionElement: string) => {\r\n      await libraryDB.updateBookMeta(bookId, { positionElement })\r\n    }\r\n  )\r\n\r\n  updateBookAction = action(async (bookId: number, bookProps: any) => {\r\n    const bookInStore = this.books.find((book) => book.id === bookId)\r\n    if (bookInStore) {\r\n      Object.assign(bookInStore, bookProps)\r\n    }\r\n    await libraryDB.updateBookMeta(bookId, bookProps)\r\n  })\r\n\r\n  openBookAction = action(async (bookId: number) => {\r\n    if (this.currentBook && this.currentBook.info.id === bookId) {\r\n      this.currentBook.info =\r\n        (await libraryDB.getBookMeta(bookId)) || this.currentBook.info\r\n      return Promise.resolve(this.currentBook)\r\n    } else {\r\n      return Promise.all([\r\n        libraryDB.getBookMeta(bookId),\r\n        libraryDB.getBookText(bookId),\r\n      ]).then((prom) => {\r\n        const info = prom[0] as Book\r\n        const rawText = prom[1] || ''\r\n        const text = converter.parseToInnerBook(rawText)\r\n\r\n        this.currentBook = {\r\n          info,\r\n          text,\r\n          meta: null,\r\n        }\r\n        console.log('open book action', this.currentBook)\r\n        return this.currentBook\r\n      })\r\n    }\r\n  })\r\n\r\n  fetchBookTextAction = action(\r\n    async (bookId: number) => await libraryDB.getBookText(bookId)\r\n  )\r\n}\r\n","import { RootStore } from './RootStore'\r\nimport { action, makeAutoObservable } from 'mobx'\r\nimport { Book } from '../types'\r\nimport * as cloud from '../uitls/cloud'\r\nimport libraryDB from '../uitls/clientDB'\r\n\r\nexport default class RemoteLibraryStore {\r\n  books: Book[] = []\r\n  isClientLoaded = false\r\n  isLoggedIn = false\r\n  isBooksLoading = false\r\n  isUploading = false\r\n  isDownloading = false\r\n  isBookRemoving = false\r\n\r\n  private remoteFolderName = 'careful-reader'\r\n  private cloudAppFolder = cloud.appFolder\r\n  private cloudDrive = cloud.drive\r\n  private rootStore: RootStore\r\n\r\n  constructor(rootStore: RootStore) {\r\n    makeAutoObservable(this)\r\n    this.rootStore = rootStore\r\n    cloud.load().then(() => {\r\n      this.isClientLoaded = true\r\n      cloud.isLoggedIn().then((isLoggedIn) => (this.isLoggedIn = isLoggedIn))\r\n    })\r\n  }\r\n  initLibrary = action(async () => {\r\n    cloud.drive.create.folder('books-folder')\r\n  })\r\n\r\n  fetchBooksListAction = action(async () => {\r\n    try {\r\n      this.isBooksLoading = true\r\n      const cloudFiles = await this.cloudAppFolder.find.file(\r\n        `name contains '-meta.json'`\r\n      )\r\n      const contentPromises = cloudFiles.map((fileMeta: { id: string }) =>\r\n        this.cloudAppFolder.download(fileMeta.id).then((content) => {\r\n          //@ts-ignore\r\n          const book: Book = JSON.parse(content)\r\n          this.books.push(book)\r\n        })\r\n      )\r\n      this.books = []\r\n      await Promise.all(contentPromises)\r\n    } catch (e) {\r\n      this.rootStore.notification.error('Fetching remote books error')\r\n    } finally {\r\n      this.isBooksLoading = false\r\n    }\r\n  })\r\n\r\n  uploadBookAction = action(async (book: Book | null) => {\r\n    if (!book) return\r\n    try {\r\n      this.isUploading = true\r\n      const [currentFolder] = await this.cloudDrive.getOrCreate.folder(\r\n        `name = '${this.remoteFolderName}'`,\r\n        this.remoteFolderName\r\n      )\r\n      const [currentFile] = await this.cloudDrive.getOrCreate.file(\r\n        `name = '${book.name}' and '${currentFolder.id}' in parents`,\r\n        book.name,\r\n        currentFolder.id\r\n      )\r\n      const bookText = await libraryDB.getBookText(book.id)\r\n      const { id: textFileId } = await this.cloudDrive.upload(\r\n        currentFile.id,\r\n        bookText\r\n      )\r\n      const updatedBookMeta = await libraryDB.updateBookMeta(book.id, {\r\n        textFileId,\r\n      })\r\n      const result = await this.syncMetaAction(updatedBookMeta)\r\n      this.books.push(book)\r\n      this.rootStore.notification.info('Upload success')\r\n      return result\r\n    } catch (e) {\r\n      this.rootStore.notification.error('Upload error')\r\n    } finally {\r\n      this.isUploading = false\r\n    }\r\n  })\r\n\r\n  syncMetaAction = action(async (book: Book | null) => {\r\n    if (!book) return\r\n    try {\r\n      this.isUploading = true\r\n      const metaFileName = book.name + '-meta.json'\r\n      const [currentFile] = await this.cloudAppFolder.getOrCreate.file(\r\n        `name = '${metaFileName}'`,\r\n        metaFileName\r\n      )\r\n      const { id: metaFileId } = await this.cloudAppFolder.upload(\r\n        currentFile.id,\r\n        JSON.stringify(book)\r\n      )\r\n      return await libraryDB.updateBookMeta(book.id, { metaFileId })\r\n    } catch (e) {\r\n      this.rootStore.notification.error('sync error')\r\n    } finally {\r\n      this.isUploading = false\r\n    }\r\n  })\r\n\r\n  downloadBookAction = action(async (book: Book | null) => {\r\n    if (!book) return\r\n    let result = ''\r\n    try {\r\n      this.isDownloading = true\r\n      if (book.textFileId) {\r\n        this.rootStore.notification.info('download sucess')\r\n        result = await this.cloudDrive.download(book.textFileId)\r\n      }\r\n      return result\r\n    } catch (e) {\r\n      this.rootStore.notification.error('download error')\r\n      return result\r\n    } finally {\r\n      this.isDownloading = false\r\n    }\r\n  })\r\n\r\n  forceBookRemove = async (book: Book) => {\r\n    const cloudMetaFile = await this.cloudAppFolder.find\r\n      .file(`name = '${book.name}-meta.json'`)\r\n      .then(([file]) => file?.id && this.cloudAppFolder.remove(file.id))\r\n\r\n    const cloudFile = await this.cloudDrive.find\r\n      .file(`name = '${book.name}'`)\r\n      .then(({ file }) => file?.id && this.cloudDrive.remove(file.id))\r\n\r\n    return Promise.allSettled([cloudFile, cloudMetaFile])\r\n  }\r\n\r\n  removeBookAction = action(async (book: Book | null) => {\r\n    if (!book) return\r\n    try {\r\n      this.isBookRemoving = true\r\n      const index = this.books.indexOf(book)\r\n      if (index > -1) {\r\n        this.books.splice(index, 1)\r\n      }\r\n      if (!book.metaFileId || !book.textFileId) {\r\n        await this.forceBookRemove(book)\r\n      } else {\r\n        const promises = []\r\n\r\n        book.textFileId &&\r\n          promises.push(this.cloudDrive.remove(book.textFileId))\r\n        book.metaFileId &&\r\n          promises.push(this.cloudAppFolder.remove(book.metaFileId))\r\n        await Promise.allSettled(promises)\r\n      }\r\n      this.rootStore.notification.info('book remove sucess')\r\n    } catch (e) {\r\n      this.rootStore.notification.error('book remove error')\r\n    } finally {\r\n      this.isBookRemoving = false\r\n    }\r\n  })\r\n}\r\n","import { action, makeAutoObservable } from 'mobx'\r\nimport { createContext } from 'react'\r\nimport AppStore from './AppStore'\r\nimport { LibraryStore } from './LibraryStore'\r\nimport RemoteLibraryStore from './RemoteLibraryStore'\r\n\r\ninterface INotification  {\r\n  message: string\r\n  type: string\r\n}\r\nexport class RootStore {\r\n  appStore: AppStore\r\n  libraryStore: LibraryStore\r\n  remoteLibraryStore: RemoteLibraryStore\r\n  notifications: INotification[] = []\r\n  public notification = {\r\n    info: action((message: string) => {\r\n      this.notifications.push({ message, type: 'info' })\r\n    }),\r\n    error: action((message: string) => {\r\n      this.notifications.push({ message, type: 'error' })\r\n    }),\r\n  }\r\n  constructor() {\r\n    makeAutoObservable(this)\r\n    this.appStore = new AppStore(this)\r\n    this.libraryStore = new LibraryStore(this)\r\n    this.remoteLibraryStore = new RemoteLibraryStore(this)\r\n  }\r\n\r\n  removeNotification(index: number) {\r\n    this.notifications.splice(index, 1)\r\n  }\r\n}\r\n\r\nexport const RootStoreContext = createContext<RootStore>({} as RootStore)\r\n","import React, { useContext } from 'react'\r\n\r\nimport { observer } from 'mobx-react'\r\nimport Button from '@material-ui/core/Button'\r\nimport { RootStoreContext } from '../../store/RootStore'\r\n\r\nexport default observer(function SignInButton() {\r\n  const { appStore } = useContext(RootStoreContext)\r\n  const {\r\n    isClientLoaded,\r\n    isLoggedIn,\r\n    signInAction,\r\n    signOutAction,\r\n  } = appStore\r\n  \r\n  return (\r\n    <>\r\n      {isClientLoaded && (\r\n        <>\r\n          {isLoggedIn ? (\r\n            <Button onClick={signOutAction} color=\"inherit\">\r\n              LogOut\r\n            </Button>\r\n          ) : (\r\n              <Button onClick={signInAction} color=\"inherit\">\r\n                Login\r\n              </Button>\r\n            )}\r\n        </>\r\n      )}\r\n    </>\r\n  )\r\n})\r\n","import React, { ReactNode } from 'react'\r\nimport './loading.scss'\r\nimport styled from 'styled-components'\r\nimport { LinearProgress } from '@material-ui/core'\r\nimport { useContext } from 'react'\r\nimport { RootStoreContext } from '../../store/RootStore'\r\nimport { observer } from 'mobx-react'\r\ninterface ISwitcher {\r\n  readonly switch: boolean\r\n}\r\nconst Switcher = styled.div<ISwitcher>`\r\n  display: ${(props) => (props.switch ? 'block' : 'none')};\r\n`\r\ninterface TLoading {\r\n  loading: boolean\r\n  children: ReactNode\r\n}\r\nexport default observer(function Loading({ loading, children }: TLoading) {\r\n  return (\r\n    <>\r\n      <Switcher switch={loading}>\r\n        <div>Loading</div>\r\n      </Switcher>\r\n      {children}\r\n    </>\r\n  )\r\n})\r\n\r\nexport const LoadingLine = observer(() => {\r\n  const { libraryStore, remoteLibraryStore } = useContext(RootStoreContext)\r\n  const showLoading = remoteLibraryStore.isBooksLoading\r\n    || remoteLibraryStore.isUploading\r\n    || remoteLibraryStore.isDownloading\r\n    || remoteLibraryStore.isBookRemoving\r\n    || libraryStore.isAddingBookInProcess\r\n    || libraryStore.isFetchingBooksInProcess\r\n\r\n    return (<>{showLoading && <LinearProgress />}</>)\r\n})\r\n","import React, { useContext, useState } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Drawer from '@material-ui/core/Drawer'\r\nimport List from '@material-ui/core/List'\r\nimport Divider from '@material-ui/core/Divider'\r\nimport ListItem from '@material-ui/core/ListItem'\r\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\r\nimport ListItemText from '@material-ui/core/ListItemText'\r\nimport LibraryBooksIcon from '@material-ui/icons/LibraryBooks'\r\nimport AppBar from '@material-ui/core/AppBar'\r\nimport Toolbar from '@material-ui/core/Toolbar'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport MenuIcon from '@material-ui/icons/Menu'\r\nimport { Link, useLocation } from 'react-router-dom'\r\nimport TuneIcon from '@material-ui/icons/Tune'\r\nimport DashboardIcon from '@material-ui/icons/Dashboard'\r\nimport { AuthButtons } from '../controls'\r\nimport styled from 'styled-components'\r\nimport { RootStoreContext } from '../../store/RootStore'\r\nimport { LoadingLine } from '../loading/Loading'\r\n\r\nconst TopHeightWorkaround = styled.div``\r\nconst Title = styled(Typography)`\r\n    overflow: hidden;\r\n    text-overflow: ellipsis;\r\n    white-space: nowrap;\r\n    flex-grow: 1;\r\n`\r\nconst useStyles = makeStyles({\r\n  list: {\r\n    width: 250,\r\n  },\r\n  menuButton: {\r\n    marginRight: '',\r\n  },\r\n  title: {\r\n    flexGrow: 1,\r\n  },\r\n})\r\n\r\nexport default observer(function Header({ children, className = '', title }: any) {\r\n  const classes = useStyles()\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const location = useLocation()\r\n  const pathTitleMap: any = {\r\n    '/': 'Library',\r\n    '/settings': 'Settings',\r\n  }\r\n  const pathname: string = location.pathname || ''\r\n  const headTitle = title || pathTitleMap[pathname]\r\n  const { libraryStore: {currentBook} } = useContext(RootStoreContext)\r\n\r\n  const toggleDrawer = (state: boolean) => (event: any) => {\r\n    if (\r\n      event.type === 'keydown' &&\r\n      (event.key === 'Tab' || event.key === 'Shift')\r\n    ) {\r\n      return\r\n    }\r\n    setIsOpen(state)\r\n  }\r\n  const list = () => (\r\n    <div\r\n      className={classes.list}\r\n      role=\"presentation\"\r\n      onClick={toggleDrawer(false)}\r\n      onKeyDown={toggleDrawer(false)}\r\n    >\r\n      <List>\r\n        {currentBook?.meta?.meta && (\r\n          <Link to={`/read/${currentBook.meta.id}`}>\r\n            <ListItem button>\r\n              <ListItemIcon>\r\n                <LibraryBooksIcon />\r\n              </ListItemIcon>\r\n              <ListItemText primary={currentBook.meta.meta.title} />\r\n            </ListItem>\r\n          </Link>\r\n        )}\r\n        <Link to=\"/\">\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <DashboardIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Home\" />\r\n          </ListItem>\r\n        </Link>\r\n\r\n        <Link to=\"/settings\">\r\n          <ListItem button>\r\n            <ListItemIcon>\r\n              <TuneIcon />\r\n            </ListItemIcon>\r\n            <ListItemText primary=\"Settings\" />\r\n          </ListItem>\r\n        </Link>\r\n      </List>\r\n      <Divider />\r\n    </div>\r\n  )\r\n  return (\r\n    <>\r\n      <TopHeightWorkaround>\r\n        <AppBar />\r\n        <Toolbar />\r\n      </TopHeightWorkaround>\r\n      <AppBar position=\"fixed\">\r\n        <Toolbar>\r\n          <IconButton\r\n            edge=\"start\"\r\n            className={classes.menuButton}\r\n            color=\"inherit\"\r\n            aria-label=\"menu\"\r\n          >\r\n            <React.Fragment>\r\n              <MenuIcon onClick={toggleDrawer(true)} />\r\n              <Drawer anchor=\"left\" open={isOpen} onClose={toggleDrawer(false)}>\r\n                {list()}\r\n              </Drawer>\r\n            </React.Fragment>\r\n          </IconButton>\r\n          <Title variant=\"h6\" >\r\n            {headTitle}\r\n          </Title>\r\n          {children}\r\n          <AuthButtons />\r\n        </Toolbar>\r\n        <LoadingLine />\r\n      </AppBar>\r\n    </>\r\n  )\r\n})\r\n","import { MouseEventHandler, MutableRefObject, useEffect } from 'react'\r\n\r\ntype TUseBoubleClickProps = {\r\n  ref: MutableRefObject<Element | undefined>\r\n  latency?: number\r\n  onSingleClick?: MouseEventHandler\r\n  onDoubleClick?: MouseEventHandler\r\n}\r\nconst useDoubleClick = ({\r\n  ref,\r\n  latency = 300,\r\n  onSingleClick,\r\n  onDoubleClick,\r\n}: TUseBoubleClickProps) => {\r\n  useEffect(() => {\r\n    const clickRef = ref.current\r\n    let clickCount = 0\r\n    const handleClick = (e: any) => {\r\n      clickCount += 1\r\n\r\n      setTimeout(() => {\r\n        if (clickCount === 1) onSingleClick && onSingleClick(e)\r\n        else if (clickCount === 2) onDoubleClick && onDoubleClick(e)\r\n\r\n        clickCount = 0\r\n      }, latency)\r\n    }\r\n\r\n    clickRef?.addEventListener('click', handleClick)\r\n    return () => {\r\n      clickRef?.removeEventListener('click', handleClick)\r\n    }\r\n  })\r\n}\r\n\r\nexport default useDoubleClick\r\n","import React, { useRef } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { Book } from '../../types'\r\nimport Paper from '@material-ui/core/Paper'\r\nimport styled from 'styled-components'\r\nimport useDoubleClick from '../../hooks/UseDoubleClick'\r\n\r\nconst Container = styled(Paper)`\r\n  width: 115px;\r\n  height: 185px;\r\n  position: relative;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  word-break: break-all;\r\n  padding: 5px;\r\n  margin: 5px;\r\n`\r\nconst Image = styled.img`\r\n  display: block;\r\n  width: 100%;\r\n  height: 100%;\r\n`\r\ninterface BookItemProps {\r\n  book: Book\r\n  onSingleClick?: () => void\r\n  onDoubleClick?: () => void\r\n  children?: any\r\n}\r\nconst BookItem = observer(\r\n  ({ book, children, onSingleClick, onDoubleClick, ...rest }: BookItemProps) => {\r\n    const buttonRef = useRef();\r\n\r\n    useDoubleClick({\r\n      onSingleClick,\r\n      onDoubleClick,\r\n      ref: buttonRef,\r\n      latency: 200\r\n    });\r\n\r\n    return (\r\n      <Container elevation={3} ref={buttonRef}>\r\n        {children}\r\n        {book.cover ? (\r\n          <>\r\n            <Image src={book.cover} alt=\"\" />\r\n          </>\r\n        ) : (\r\n            <div>{book.name}</div>\r\n          )}\r\n      </Container>\r\n    )\r\n  }\r\n)\r\n\r\nexport default BookItem\r\n","import React, { useState } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { Book } from '../../types'\r\nimport BookItem from '../../components/common/BookItem'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Button from '@material-ui/core/Button'\r\nimport DialogContent from '@material-ui/core/DialogContent'\r\nimport DialogTitle from '@material-ui/core/DialogTitle'\r\nimport Dialog from '@material-ui/core/Dialog'\r\nimport DialogActions from '@material-ui/core/DialogActions'\r\nimport Typography from '@material-ui/core/Typography'\r\nimport Box from '@material-ui/core/Box'\r\nimport styled from 'styled-components'\r\n\r\ntype TShelveActionHandler = (book: Book | null) => void\r\n\r\nconst Spacer = styled.div`\r\n  height: 56px;\r\n  width: 100%;\r\n`\r\n\r\nexport type TSheveAction = {\r\n  text: string\r\n  handler: TShelveActionHandler\r\n}\r\ninterface TShelve {\r\n  books: Book[]\r\n  dialogBookClickHandler?: TShelveActionHandler\r\n  actions: TSheveAction[]\r\n}\r\n\r\nconst Shelve = observer(\r\n  ({ books, actions, dialogBookClickHandler }: TShelve) => {\r\n    const [isBookDialogOpenned, setIsBookDialogOpenned] = useState(false)\r\n    const [selectedBook, setSelectedBook] = useState<Book | null>(null)\r\n    const bookClickHandler = (book: Book) => {\r\n      setIsBookDialogOpenned(true)\r\n      setSelectedBook(book)\r\n    }\r\n    const handleDialogClose = () => {\r\n      setIsBookDialogOpenned(false)\r\n      setSelectedBook(null)\r\n    }\r\n    const handleBookAction = (action: TSheveAction) => {\r\n      action.handler(selectedBook)\r\n      handleDialogClose()\r\n    }\r\n    const handleDefaultAction = (book: Book) => dialogBookClickHandler && dialogBookClickHandler(book)\r\n\r\n    return (\r\n      <>\r\n        <Box display=\"flex\" justifyContent=\"center\" flexWrap=\"wrap\">\r\n          {books.map((book: Book, index: number) => (\r\n            <BookItem key={index} book={book}\r\n              onSingleClick={() => bookClickHandler(book)}\r\n              onDoubleClick={() => handleDefaultAction(book)}\r\n            />\r\n          ))}\r\n          <Spacer />\r\n        </Box>\r\n        <Dialog\r\n          onClose={handleDialogClose}\r\n          open={isBookDialogOpenned}\r\n          fullWidth={true}\r\n        >\r\n          <DialogTitle></DialogTitle>\r\n          <DialogContent>\r\n            <Grid container justify=\"center\" spacing={2}>\r\n              <Grid item>\r\n                {selectedBook && (\r\n                  <BookItem\r\n                    book={selectedBook}\r\n                    onSingleClick={() =>\r\n                      handleDefaultAction(selectedBook)\r\n                    }\r\n                  />\r\n                )}\r\n              </Grid>\r\n              <Grid item xs={8}>\r\n                <Typography display=\"block\" noWrap={true}>\r\n                  {selectedBook?.name}\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n          </DialogContent>\r\n          <DialogActions>\r\n            {actions.map((action, index) => (\r\n              <Button\r\n                key={index}\r\n                onClick={() => handleBookAction(action)}\r\n                color=\"primary\"\r\n              >\r\n                {action.text}\r\n              </Button>\r\n            ))}\r\n          </DialogActions>\r\n        </Dialog>\r\n      </>\r\n    )\r\n  }\r\n)\r\n\r\nexport default Shelve\r\n","import React, { useContext } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { Book } from '../../types'\r\nimport { Loading } from '../../components/loading'\r\nimport Shelve, { TSheveAction } from './Shelve'\r\nimport { RootStoreContext } from '../..//store/RootStore'\r\n\r\nconst RemoteBooksList = observer(() => {\r\n  const { libraryStore, remoteLibraryStore } = useContext(RootStoreContext)\r\n  const {\r\n    books,\r\n    isBooksLoading,\r\n    isLoggedIn,\r\n    downloadBookAction,\r\n    removeBookAction,\r\n  } = remoteLibraryStore\r\n\r\n  const { addBookAction, isBookExist } = libraryStore\r\n\r\n  const collectBook = async (book: Book | null) => {\r\n    if (isBookExist(book?.name)) {\r\n      return\r\n    }\r\n    const text = await downloadBookAction(book)\r\n    if (text && book) {\r\n      addBookAction(text, book?.name)\r\n    }\r\n  }\r\n  const actions: TSheveAction[] = [\r\n    {\r\n      text: 'remove',\r\n      handler: removeBookAction,\r\n    },\r\n    {\r\n      text: 'collect',\r\n      handler: collectBook,\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <>\r\n      <div className={`collection ${!isLoggedIn ? 'hidden' : ''}`}>\r\n        <Loading loading={isBooksLoading}>\r\n          <Shelve\r\n            books={books}\r\n            dialogBookClickHandler={collectBook}\r\n            actions={actions}\r\n          />\r\n        </Loading>\r\n      </div>\r\n    </>\r\n  )\r\n})\r\nexport default RemoteBooksList\r\n","import { observer } from 'mobx-react'\r\nimport { readFileContent } from '../../uitls/common'\r\nimport React, { useContext } from 'react'\r\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\r\nimport Fab from '@material-ui/core/Fab';\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport { RootStoreContext } from '../../store/RootStore';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  container: {\r\n    position: 'absolute',\r\n    right: 0,\r\n    bottom: theme.spacing(8),\r\n  },\r\n  fab: {\r\n    right: theme.spacing(2),\r\n  },\r\n  input: {\r\n    display: 'none'\r\n  }\r\n}));\r\n\r\nconst AddBookButton = observer(({ ...rest }: any) => {\r\n  const { libraryStore: { addBookAction } } = useContext(RootStoreContext)\r\n  const theme = useTheme();\r\n  const classes = useStyles(theme)\r\n\r\n  function onChangeHandler(event: React.ChangeEvent<HTMLInputElement>) {\r\n    if (event.target.files?.length) {\r\n      const file = event.target.files[0]\r\n      readFileContent(file).then((text: string) => {\r\n        addBookAction(text, file.name)\r\n      })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <label className={classes.container} {...rest} htmlFor=\"btn-add-book\">\r\n      <input\r\n        type=\"file\"\r\n        name=\"\"\r\n        id=\"btn-add-book\"\r\n        onChange={onChangeHandler}\r\n        accept=\".fb2\"\r\n        className={classes.input}\r\n      />\r\n      <Fab\r\n        color=\"primary\"\r\n        component=\"span\"\r\n        className={classes.fab}>\r\n        <AddIcon />\r\n      </Fab>\r\n\r\n    </label>\r\n  )\r\n})\r\n\r\n\r\nconst BooksListPlaceholder = observer(() => (\r\n  <div className=\"book-list-placeholder\">\r\n    <div className=\"centered\">\r\n      <div>\r\n        Welcome! You haven't uploaded any books yet. Careful Reader supports\r\n        <strong>&nbsp;fb2&nbsp;</strong>\r\n        ones.\r\n      </div>\r\n      <AddBookButton className=\"add-btn-placeholder\" />\r\n    </div>\r\n  </div>\r\n))\r\n\r\nexport { AddBookButton, BooksListPlaceholder }\r\n","import React, { useContext } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { Book } from '../../types'\r\nimport { useHistory } from 'react-router-dom'\r\nimport Shelve, { TSheveAction } from './Shelve'\r\nimport { RootStoreContext } from '../..//store/RootStore'\r\n\r\nconst LocalBooksList = observer(() => {\r\n  const history = useHistory()\r\n  const { libraryStore, remoteLibraryStore } = useContext(RootStoreContext)\r\n  const { books, removeBookAction } = libraryStore\r\n  const { uploadBookAction, syncMetaAction } = remoteLibraryStore\r\n  const handleBookRead = (book: Book | null) => {\r\n    book && history.push(`/read/${book.id}`)\r\n  }\r\n\r\n  const actions: TSheveAction[] = [\r\n    {\r\n      text: 'remove',\r\n      handler: removeBookAction,\r\n    },\r\n    {\r\n      text: 'read',\r\n      handler: handleBookRead,\r\n    },\r\n    {\r\n      text: 'upload',\r\n      handler: uploadBookAction,\r\n    },\r\n    {\r\n      text: 'sync',\r\n      handler: syncMetaAction\r\n    }\r\n  ]\r\n\r\n  return (\r\n      <Shelve\r\n        books={books}\r\n        dialogBookClickHandler={handleBookRead}\r\n        actions={actions}\r\n      />\r\n  )\r\n})\r\n\r\nexport default LocalBooksList\r\n","import React from 'react'\r\nimport { Header } from '../../components/common'\r\nimport { observer } from 'mobx-react'\r\nimport RemoteBooksList from './RemoteShelve'\r\nimport { AddBookButton } from './common'\r\nimport LocalBooksList from './LocalShelve'\r\nimport SwipeableViews from 'react-swipeable-views'\r\nimport { useTheme } from '@material-ui/core/styles'\r\nimport BottomNavigation from '@material-ui/core/BottomNavigation'\r\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction'\r\nimport Zoom from '@material-ui/core/Zoom'\r\nimport AddIcon from '@material-ui/icons/Add'\r\nimport styled from 'styled-components'\r\n\r\nconst Contaier = styled.div`\r\n  position: relative;\r\n`\r\nconst Content = styled.div`\r\n  overflow: auto;\r\n`\r\nconst FabsContainer = styled.div`\r\n  position: fixed;\r\n  right: 0;\r\n  bottom: 0;\r\n`\r\nconst BottomMenu = styled.div`\r\n  position: fixed;\r\n  bottom: 0;\r\n  right: 0;\r\n  left: 0;\r\n`\r\nconst BottomMenuHeight = styled.div``\r\n\r\nexport default observer(function Shelves() {\r\n  const theme = useTheme()\r\n  const [value, setValue] = React.useState(0)\r\n  const transitionDuration = {\r\n    enter: theme.transitions.duration.enteringScreen,\r\n    exit: theme.transitions.duration.leavingScreen,\r\n  }\r\n  const handleChangeIndex = (index: number) => setValue(index)\r\n  const handleChange = (event: any, index: number) => handleChangeIndex(index)\r\n\r\n  const fabs = [\r\n    {\r\n      color: 'primary',\r\n      icon: <AddIcon />,\r\n      label: 'Add',\r\n      clickHandler: () => {\r\n        console.log('hey you')\r\n      },\r\n    },\r\n  ]\r\n\r\n  return (\r\n    <Contaier>\r\n      <Header></Header>\r\n      <Content>\r\n        <SwipeableViews index={value} onChangeIndex={handleChangeIndex}>\r\n          <LocalBooksList />\r\n          <RemoteBooksList />\r\n          <div>favorite</div>\r\n        </SwipeableViews>\r\n      </Content>\r\n      <FabsContainer>\r\n        {fabs.map((fab, index) => (\r\n          <Zoom\r\n            key={fab.color}\r\n            in={value === index}\r\n            timeout={transitionDuration}\r\n            style={{\r\n              transitionDelay: `${\r\n                value === index ? transitionDuration.exit : 0\r\n              }ms`,\r\n            }}\r\n            unmountOnExit\r\n          >\r\n            <AddBookButton />\r\n          </Zoom>\r\n        ))}\r\n      </FabsContainer>\r\n      <BottomMenu>\r\n        <BottomMenuHeight />\r\n\r\n        <BottomNavigation value={value} onChange={handleChange} showLabels>\r\n          <BottomNavigationAction label=\"local\" />\r\n          <BottomNavigationAction label=\"remote\" />\r\n          <BottomNavigationAction label=\"fav\" />\r\n        </BottomNavigation>\r\n      </BottomMenu>\r\n    </Contaier>\r\n  )\r\n})\r\n","import Shelves from './Shelves'\r\n\r\nexport default Shelves\r\n","const MAX_WORD_CLASSES = 100\r\n\r\nexport function hightLightElementsOnScreen(\r\n  screenElement: any,\r\n  allElements: any\r\n): any[] {\r\n  const onScreen: any[] = []\r\n  if (!screenElement) return onScreen\r\n  const viewportTop = screenElement.scrollTop\r\n  const viewportHeight = screenElement.clientHeight\r\n  const viewportBottom = viewportTop + viewportHeight\r\n  for (let i = 0; i < allElements.length; i++) {\r\n    const el = allElements[i]\r\n    if (isOnScreen(el, screenElement)) {\r\n      stylize(el)\r\n      onScreen.push(el)\r\n    }\r\n    if (el.offsetTop > viewportBottom) {\r\n      break\r\n    }\r\n  }\r\n  return onScreen\r\n}\r\n\r\nexport function getStyledElement(text: string) {\r\n  // const separator = /(?:,| |&nbsp;|\\.)+/\r\n  const indexes = shuffle([...Array(MAX_WORD_CLASSES).keys()])\r\n  const separator = ' '\r\n  let index = 0\r\n  const children = text\r\n    .split(separator)\r\n    .map((word: string) => {\r\n      index = index >= MAX_WORD_CLASSES ? 0 : index + 1\r\n      return `<span class=\"w${indexes[index]}\">${word}</span>`\r\n    })\r\n    .join(separator)\r\n  const wrapper = document.createElement('hlw')\r\n  wrapper.innerHTML = children\r\n  return wrapper\r\n}\r\n\r\nfunction shuffle<T>(array: Array<T>) {\r\n  return array.sort(() => Math.random() - 0.5)\r\n}\r\n\r\nfunction textNodesUnder(el: HTMLElement) {\r\n  let n\r\n  const result = []\r\n  let walk = document.createTreeWalker(el, NodeFilter.SHOW_TEXT, null, false)\r\n  while ((n = walk.nextNode())) result.push(n)\r\n  return result\r\n}\r\n\r\nexport function stylize(element: HTMLElement) {\r\n  if (element.className.includes('hg')) return\r\n\r\n  textNodesUnder(element).forEach((textElement: any) => {\r\n    if (textElement) {\r\n      const styledTextElement = getStyledElement(textElement.textContent)\r\n      textElement.replaceWith(styledTextElement)\r\n      element.className += ' hg'\r\n    }\r\n  })\r\n}\r\n\r\nfunction isOnScreen(el: any, screenContainerElement: any) {\r\n  const viewportTop = screenContainerElement.scrollTop\r\n  const viewportHeight = screenContainerElement.clientHeight\r\n  const viewportBottom = viewportTop + viewportHeight\r\n  const top = el.offsetTop\r\n  const height = el.clientHeight\r\n  const bottom = top + height\r\n\r\n  return (\r\n    (top >= viewportTop && top < viewportBottom) ||\r\n    (bottom > viewportTop && bottom <= viewportBottom) ||\r\n    (height > viewportHeight && top <= viewportTop && bottom >= viewportBottom)\r\n  )\r\n}\r\n","import React, { useEffect, useState, useRef, useContext } from 'react'\r\nimport './Reader.scss'\r\nimport { useParams } from 'react-router-dom'\r\nimport { debounce } from '../../uitls/common'\r\nimport { hightLightElementsOnScreen } from '../../uitls/styler'\r\nimport { Header } from '../../components/common'\r\nimport { observer } from 'mobx-react'\r\nimport useEventListener from '@use-it/event-listener'\r\nimport { Loading } from '../../components/loading'\r\nimport { useDebounce } from 'use-debounce'\r\nimport styled from 'styled-components'\r\nimport { RootStoreContext } from '../../store/RootStore'\r\n\r\nconst PageCount = styled.span`\r\n  white-space: nowrap;\r\n  padding: 6px 8px;\r\n`\r\ninterface QueryParams {\r\n  bookId: string\r\n}\r\n\r\nconst dfunc = debounce((fn) => fn && fn(), 100)\r\n\r\nexport default observer(function Reader() {\r\n  const { appStore, libraryStore } = useContext(RootStoreContext)\r\n  const { wordsHighlight, dynamicTextOrientation } = appStore\r\n  const { updateBookPositionAction, openBookAction, currentBook } = libraryStore\r\n  const [numberOfcurrentPage, setNumberOfCurrentPage] = useState(0)\r\n  const [currenPositionPercent, setCurrenPositionPercent] = useState('0.0')\r\n  const [pagesCount, setPagesCount] = useState(0)\r\n  const [showControls, setShowControls] = useState(false)\r\n  const textContainerRef = useRef<HTMLDivElement | null>(null)\r\n  const elementsForHightlightRef = useRef([])\r\n  const [loading, setLoading] = useState(false)\r\n  const queryParams = useParams<QueryParams>()\r\n  const bookId = parseInt(queryParams.bookId)\r\n  const [motionStyle, setMotionStyle] = useState({})\r\n\r\n  useEffect(() => {\r\n    const { current } = textContainerRef\r\n    const openBook = async () => {\r\n      setLoading(true)\r\n      const { text, info } = await openBookAction(bookId)\r\n      current!.innerHTML = text\r\n      elementsForHightlightRef.current = getElementsForHightlight()\r\n      console.log('elements', getPagesCount())\r\n      setPagesCount(getPagesCount())\r\n      const positions: any[] = []\r\n      current\r\n        ?.querySelectorAll('p')\r\n        .forEach((o: HTMLElement) => positions.push(o.getAttribute('data-id')))\r\n      restoreScrollPoition(info.positionElement)\r\n      setLoading(false)\r\n    }\r\n\r\n    openBook()\r\n    current!.addEventListener('scroll', handleScroll)\r\n    return () => {\r\n      return current!.removeEventListener('scroll', handleScroll)\r\n    }\r\n  }, [])\r\n\r\n  const [dtoStyle] = useDebounce(motionStyle, 5)\r\n  const deviceOrientationHandler = ({ gamma }: DeviceOrientationEvent) => {\r\n    if (!dynamicTextOrientation) {\r\n      setMotionStyle({ transform: '' })\r\n      return\r\n    }\r\n    if (gamma) {\r\n      const style = {\r\n        transform: `rotateZ(${-gamma}deg)`,\r\n      }\r\n      setMotionStyle(style)\r\n    }\r\n  }\r\n  const bookTitle = () =>\r\n    currentBook?.info?.meta?.title || currentBook?.info?.name\r\n  useEventListener('deviceorientation', deviceOrientationHandler)\r\n  return (\r\n    <div className=\"reader\">\r\n      <Header\r\n        className={`${showControls ? '' : ' hidden'} `}\r\n        title={bookTitle()}\r\n      >\r\n        <div className=\"\">{currenPositionPercent}%</div>\r\n        <PageCount>{`${numberOfcurrentPage}/${pagesCount}`}</PageCount>\r\n      </Header>\r\n      <Loading loading={loading}>\r\n        <div className={`list-view ${wordsHighlight ? 'highlight' : ''}`}>\r\n          <div\r\n            className=\"text-container\"\r\n            onClick={toggleMenuHandler}\r\n            style={dtoStyle}\r\n            ref={textContainerRef}\r\n          ></div>\r\n        </div>\r\n      </Loading>\r\n    </div>\r\n  )\r\n\r\n  function getElementsForHightlight() {\r\n    const result: any = []\r\n    document.querySelectorAll('p').forEach((el: any) => {\r\n      result.push(el)\r\n    })\r\n    return result.sort((a: any, b: any) => a.offsetTop > b.offsetTop)\r\n  }\r\n\r\n  function handleScroll(e: Event) {\r\n    const { current } = textContainerRef\r\n    const { current: elementsForHightlight } = elementsForHightlightRef\r\n    if (current) {\r\n      const percent = getPercentOfScroll()\r\n      setCurrenPositionPercent(percent.toFixed(2))\r\n      setNumberOfCurrentPage(getNumberOfCurrentPage())\r\n      dfunc(() => {\r\n        const onScreen =\r\n          hightLightElementsOnScreen(current, elementsForHightlight) || []\r\n        updateBookPosition(onScreen[0])\r\n      })\r\n    }\r\n  }\r\n\r\n  function getPercentOfScroll() {\r\n    const { current } = textContainerRef\r\n    return current ? (current.scrollTop * 100) / current.scrollHeight : 0.0\r\n  }\r\n\r\n  function updateBookPosition(posElement: HTMLElement) {\r\n    if (posElement) {\r\n      const positionElementId = posElement.getAttribute('data-id')\r\n      positionElementId && updateBookPositionAction(bookId, positionElementId)\r\n    }\r\n  }\r\n\r\n  function restoreScrollPoition(positionId: string) {\r\n    if (positionId) {\r\n      const toElement = document.querySelector(`[data-id=\"${positionId}\"]`)\r\n      toElement?.scrollIntoView()\r\n    }\r\n  }\r\n\r\n  function getPagesCount() {\r\n    const { current } = textContainerRef\r\n    return Math.round(current!.scrollHeight / current!.clientHeight)\r\n  }\r\n\r\n  function getNumberOfCurrentPage() {\r\n    const { current } = textContainerRef\r\n    return Math.round(current!.scrollTop / current!.clientHeight)\r\n  }\r\n\r\n  function toggleMenuHandler() {\r\n    setShowControls(!showControls)\r\n  }\r\n})\r\n","import Reader from './Reader'\r\n\r\nexport default Reader\r\n","export default __webpack_public_path__ + \"static/media/page1.7720a4ef.jpg\";","export default __webpack_public_path__ + \"static/media/page2.c690ddc0.jpg\";","export default __webpack_public_path__ + \"static/media/page3.ce566b3c.jpg\";","import { observer } from 'mobx-react'\r\nimport React, { useContext } from 'react'\r\nimport { useIntl } from 'react-intl'\r\nimport { Header } from '../../components/common'\r\nimport AppContext from '../../store/AppStore'\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\r\nimport FormControl from '@material-ui/core/FormControl'\r\nimport FormLabel from '@material-ui/core/FormLabel'\r\nimport Grid from '@material-ui/core/Grid'\r\nimport Switch from '@material-ui/core/Switch'\r\nimport InputLabel from '@material-ui/core/InputLabel'\r\nimport TextField from '@material-ui/core/TextField'\r\nimport MenuItem from '@material-ui/core/MenuItem'\r\nimport Select from '@material-ui/core/Select'\r\nimport styled from 'styled-components'\r\nimport PageCoverImage1 from '../../static/page1.jpg'\r\nimport PageCoverImage2 from '../../static/page2.jpg'\r\nimport PageCoverImage3 from '../../static/page3.jpg'\r\nimport { RootStoreContext } from '../..//store/RootStore'\r\n\r\nconst FormControlStyled = styled(FormControl)`\r\n  margin: 10px;\r\n  min-width: 200px;\r\n`\r\nconst CoverImage = styled.img`\r\n  height: 56px;\r\n`\r\n\r\nexport default observer(function Settings() {\r\n  const { appStore } = useContext(RootStoreContext)\r\n  const {\r\n    locale,\r\n    imageCover,\r\n    wordsHighlight,\r\n    isUseImageCover,\r\n    pageBackgroundColor,\r\n    dynamicTextOrientation,\r\n  } = appStore\r\n  const intl = useIntl()\r\n  const handleInputChange = (\r\n    event: React.ChangeEvent<any>\r\n  ) => {\r\n    const handlerName: string = event.target.name\r\n    const handlerParams = event.target.type === 'checkbox' ? event.target.checked : event.target.value\r\n    //@ts-ignore\r\n    const handler = appStore[handlerName]\r\n    if (typeof handler === 'function') {\r\n      handler(handlerParams)\r\n    }\r\n  }\r\n\r\n  const getUseImageCoverTitle = () =>\r\n    isUseImageCover ? 'изображение' : 'сплошной текст'\r\n\r\n  return (\r\n    <>\r\n      <Header></Header>\r\n      <Grid container>\r\n        <Grid item xs={12}>\r\n          <FormControlStyled>\r\n            <InputLabel id=\"language-select-label\">\r\n              {intl.formatMessage({ id: 'settings.language' })}\r\n            </InputLabel>\r\n            <Select\r\n              labelId=\"language-select-label\"\r\n              value={locale}\r\n              name=\"setLocale\"\r\n              onChange={handleInputChange}\r\n            >\r\n              <MenuItem value={'ru'}>Русский</MenuItem>\r\n              <MenuItem value={'en'}>English</MenuItem>\r\n            </Select>\r\n          </FormControlStyled>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <FormControlStyled>\r\n            <FormLabel component=\"legend\">\r\n              Подсветка слов в тексте для упрощения поиска строк глазами\r\n            </FormLabel>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={wordsHighlight}\r\n                  onChange={handleInputChange}\r\n                  name=\"toggleHightligting\"\r\n                />\r\n              }\r\n              label=\"Подсветка слов\"\r\n            />\r\n          </FormControlStyled>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <FormControlStyled>\r\n            <FormLabel component=\"legend\">\r\n              Подстраивать положение текста в зависимости от ориентации\r\n              устройства\r\n            </FormLabel>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={dynamicTextOrientation}\r\n                  onChange={handleInputChange}\r\n                  name=\"toggleDynamicTextOrientation\"\r\n                />\r\n              }\r\n              label=\"Динамическая ориентация текста\"\r\n            />\r\n          </FormControlStyled>\r\n        </Grid>\r\n        <Grid item xs={12}>\r\n          <FormControlStyled>\r\n            <FormLabel component=\"legend\">Подложка книги</FormLabel>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={isUseImageCover}\r\n                  onChange={handleInputChange}\r\n                  name=\"toggleUseImageCover\"\r\n                />\r\n              }\r\n              label={getUseImageCoverTitle()}\r\n            />\r\n          </FormControlStyled>\r\n          {isUseImageCover && <FormControlStyled>\r\n            <InputLabel id=\"cover-image-select-label\">\r\n              {intl.formatMessage({ id: 'settings.coverImage' })}\r\n            </InputLabel>\r\n            <Select\r\n              labelId=\"cover-image-select-label\"\r\n              value={imageCover}\r\n              name=\"setImageCoverAction\"\r\n              onChange={handleInputChange}\r\n            >\r\n              <MenuItem value={'1'}>\r\n                <CoverImage src={PageCoverImage1} />\r\n              </MenuItem>\r\n              <MenuItem value={'2'}>\r\n                <CoverImage src={PageCoverImage2} />\r\n              </MenuItem>\r\n              <MenuItem value={'3'}>\r\n                <CoverImage src={PageCoverImage3} />\r\n              </MenuItem>\r\n            </Select>\r\n          </FormControlStyled>}\r\n          {!isUseImageCover && <FormControlStyled>\r\n            <TextField\r\n              id=\"cover-bg-color-input-label\"\r\n              label={intl.formatMessage({ id: 'settings.coverBgColor' })}\r\n              type=\"text\"\r\n              value={pageBackgroundColor}\r\n              name=\"setPageBackgroundColorAction\"\r\n              onChange={handleInputChange}\r\n              margin=\"normal\"\r\n            />\r\n          </FormControlStyled>\r\n          }\r\n        </Grid>\r\n      </Grid>\r\n    </>\r\n  )\r\n})\r\n","import React, { useContext, useEffect } from 'react'\r\nimport Snackbar from '@material-ui/core/Snackbar'\r\nimport IconButton from '@material-ui/core/IconButton'\r\nimport CloseIcon from '@material-ui/icons/Close'\r\nimport Alert from '@material-ui/lab/Alert';\r\nimport { observer } from 'mobx-react'\r\nimport { RootStoreContext } from '../store/RootStore'\r\n\r\nconst Notifications = observer(({ rootStore }: any) => {\r\n  const { notifications } = useContext(\r\n    RootStoreContext\r\n  )\r\n\r\n  return (\r\n    <>\r\n      {notifications.map(({ message, type }, i: number) => (\r\n        <Notification message={message} index={i} type={type} key={`notification-${i}`} />\r\n      ))}\r\n    </>\r\n  )\r\n})\r\n\r\ntype TNotificationProps = { message: string, index: number, type: string }\r\nconst Notification = ({ message, index, type }: TNotificationProps) => {\r\n  const [open, setOpen] = React.useState(true)\r\n  const rootStore = useContext(\r\n    RootStoreContext\r\n  )\r\n  const handleClose = (event: React.SyntheticEvent, reason?: string) => {\r\n    setOpen(false)\r\n    rootStore.removeNotification(index)\r\n  }\r\n  const getAlertClassForType = () => {\r\n    const typeClassMap = {\r\n      info: 'success',\r\n      error: 'error'\r\n    }\r\n    //@ts-ignore\r\n    return typeof type === 'string' ? typeClassMap[type] : 'success'\r\n  }\r\n  return (\r\n    <Snackbar\r\n      anchorOrigin={{\r\n        vertical: 'top',\r\n        horizontal: 'left',\r\n      }}\r\n      open={open}\r\n      autoHideDuration={3000}\r\n      onClose={handleClose}\r\n    >\r\n      <Alert onClose={handleClose} severity={getAlertClassForType()}>\r\n        {message}\r\n      </Alert>\r\n    </Snackbar>\r\n  )\r\n}\r\n\r\nexport default Notifications\r\n","import React, { useEffect } from 'react'\r\nimport './App.scss'\r\nimport Shelves from './pages/shelves'\r\nimport Reader from './pages/reader'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport { observer } from 'mobx-react'\r\nimport { RootStoreContext, RootStore } from './store/RootStore'\r\nimport { IntlProvider } from 'react-intl'\r\nimport { Settings } from './pages/settings'\r\nimport Notifications from './components/Notifications'\r\n\r\nconst rootStore = new RootStore()\r\n\r\nconst App = observer(function App() {\r\n  const basename =\r\n    process.env.NODE_ENV === 'development' ? '/' : process.env.PUBLIC_URL\r\n  const { appStore, libraryStore, remoteLibraryStore } = rootStore\r\n  const { isLoggedIn } = remoteLibraryStore\r\n  const messages = appStore.getLocaleMessages()\r\n  useEffect(() => {\r\n    libraryStore.fetchBooksListAction()\r\n  }, [])\r\n\r\n  const fetchBooks = async () => {\r\n    if (isLoggedIn) await remoteLibraryStore.fetchBooksListAction()\r\n  }\r\n  useEffect(() => {\r\n    fetchBooks()\r\n  }, [isLoggedIn])\r\n\r\n  return (\r\n    <RootStoreContext.Provider value={rootStore}>\r\n      <IntlProvider\r\n        locale={appStore.locale}\r\n        defaultLocale={appStore.defaultLocale}\r\n        messages={messages}\r\n      >\r\n        <Router basename={basename}>\r\n          <Switch>\r\n            {/* <Route exact path=\"/\">\r\n                  <Feed />\r\n                </Route> */}\r\n            <Route exact path=\"/\">\r\n              <Shelves />\r\n            </Route>\r\n            <Route exact path=\"/read/:bookId\">\r\n              <Reader />\r\n            </Route>\r\n            <Route exact path=\"/settings\">\r\n              <Settings />\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n        <Notifications />\r\n      </IntlProvider>\r\n    </RootStoreContext.Provider>\r\n  )\r\n})\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport App from './App'\r\nimport * as serviceWorker from './serviceWorker'\r\nimport 'normalize.css'\r\n\r\nconst app = <App />\r\n\r\nReactDOM.render(app, document.getElementById('root'))\r\nserviceWorker.register()\r\n"],"sourceRoot":""}