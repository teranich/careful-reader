{"version":3,"sources":["components/controls/back.svg","components/controls/home.svg","components/controls/settings.svg","uitls/converter.ts","uitls/xsl.js","uitls/common.ts","uitls/cloud.ts","store/AppStore.ts","components/controls/AuthButtons.tsx","uitls/clientDB.ts","store/LibraryStore.ts","components/common/Header.tsx","store/RemoteLibraryStore.ts","components/loading/Loading.tsx","components/common/BookItem.tsx","pages/shelves/Shelve.tsx","pages/shelves/RemoteShelve.tsx","pages/shelves/common.tsx","pages/shelves/LocalShelve.tsx","pages/shelves/Shelves.tsx","pages/shelves/index.ts","uitls/styler.ts","pages/reader/Reader.tsx","pages/reader/index.ts","static/page1.jpg","static/page2.jpg","static/page3.jpg","pages/settings/Settings.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["convertWithXSL","text","xsl","parser","DOMParser","xsltProcessor","XSLTProcessor","xml","parseFromString","parsedXsl","window","importStylesheet","transformToFragment","document","getBookPreviewInfo","fb2Book","rawMeta","meta","textContent","JSON","parse","cover","defaultEncoding","isDefaultEncoding","encoding","getTextEncoding","RegExp","exec","includes","readFile","file","a","reader","FileReader","Promise","resolve","reject","onload","event","result","target","onerror","error","readAsText","importScript","src","script","createElement","body","appendChild","async","loaded","loadGapi","then","gapi","load","auth2","catch","console","isGAPILoaded","googleDriveAPIDocument","scope","client","init","apiKey","process","clientId","discoveryDocs","signIn","getAuthInstance","signOut","isLoggedIn","isSignedIn","get","folderMIME","create","spaces","type","name","folderId","log","mimeType","parents","promisify","drive","files","resource","fields","response","find","query","q","ret","list","pageSize","pageToken","token","orderBy","concat","nextPageToken","download","fileId","alt","resp","remove","delete","status","getOrCreate","exist","length","upload","content","request","path","method","params","uploadType","stringify","gapiFn","options","err","createInDrive","findInDrive","getOrCreateInDrive","uploadInDrive","folder","createInAppFolder","findInAppFolder","getOrCreateInAppFolder","uploadOnAppFolder","appFolder","foder","AppStore","globalIntlCache","createIntlCache","createIntl","locale","messages","ru_messages","en_messages","en","ru","setLocale","action","Object","keys","Error","store","setImageCoverAction","image","imageCover","getLocaleMessages","toggleHightligting","value","wordsHighlight","toggleDynamicTextOrientation","dynamicTextOrientation","setPageColor","pageColor","toggleUseImageCover","isUseImageCover","setPageBackgroundColorAction","pageBackgroundColor","cloud","x","isClientLoaded","signInAction","signOutAction","observable","defaultLocale","React","createContext","observer","useContext","AppStoreContext","Button","onClick","color","DB_INDEX_NAME","DB_STORE_NAME","dbPromise","openDB","upgrade","db","oldVersion","createObjectStore","keyPath","autoIncrement","txPromise","transaction","libraryDB","getBookMeta","id","getAllMeta","getAll","getBookText","addBook","timestamp","Date","now","tx","objectStore","add","book","done","updateBookMeta","bookId","updatedProps","oldBook","updatedBook","put","clear","LibraryStore","fetchBooksListAction","books","info","addBookAction","rawBookText","converter","newBook","isAddingBookInProcess","push","syncBookAction","removeBookAction","bookIndex","indexOf","splice","updateBookPositionAction","positionElement","updateBookAction","bookProps","bookInStore","assign","openBookAction","currentBook","all","prom","children","innerHTML","fetchBookTextAction","remoteBooks","TopHeightWorkaround","styled","div","Title","Typography","useStyles","makeStyles","width","menuButton","marginRight","title","flexGrow","className","classes","useState","isOpen","setIsOpen","pathname","useLocation","headTitle","LibraryStoreContext","toggleDrawer","state","key","AppBar","Toolbar","position","IconButton","edge","aria-label","Fragment","Drawer","anchor","open","onClose","role","onKeyDown","List","to","ListItem","button","ListItemIcon","ListItemText","primary","Divider","variant","AuthButtons","RemoteLibraryStore","remoteFolderName","initLibrary","cloudAppFolder","cloudDrive","isBooksLoading","cloudFiles","contentPromises","map","fileMeta","uploadBookAction","isUploading","currentFolder","currentFile","bookText","textFileId","updatedBookMeta","syncMetaAction","metaFileName","metaFileId","downloadBookAction","promises","Switcher","props","switch","Loading","loading","Container","Paper","Image","img","BookItem","elevation","Spacer","Shelve","actions","dialogBookClickHandler","isBookDialogOpenned","setIsBookDialogOpenned","selectedBook","setSelectedBook","bookClickHandler","handleDialogClose","Box","display","justifyContent","flexWrap","index","Dialog","fullWidth","DialogTitle","DialogContent","Grid","container","justify","spacing","item","xs","noWrap","DialogActions","handler","handleBookAction","RemoteBooksList","RemoteLibraryStoreContext","collectBook","theme","right","bottom","fab","input","AddBookButton","rest","useTheme","htmlFor","onChange","readFileContent","accept","Fab","component","LocalBooksList","history","useHistory","handleBookRead","Contaier","Content","FabsContainer","BottomMenu","BottomMenuHeight","Shelves","setValue","transitionDuration","enter","transitions","duration","enteringScreen","exit","leavingScreen","handleChangeIndex","fabs","icon","label","clickHandler","onChangeIndex","Zoom","in","timeout","style","transitionDelay","unmountOnExit","BottomNavigation","showLabels","BottomNavigationAction","getStyledElement","indexes","Array","sort","Math","random","split","word","join","wrapper","stylize","element","el","n","walk","createTreeWalker","NodeFilter","SHOW_TEXT","nextNode","textNodesUnder","forEach","textElement","styledTextElement","replaceWith","isOnScreen","screenContainerElement","viewportTop","scrollTop","viewportHeight","clientHeight","viewportBottom","top","offsetTop","height","PageCount","span","dfunc","func","waitFor","args","clearTimeout","setTimeout","debounce","fn","Reader","AppContext","numberOfcurrentPage","setNumberOfCurrentPage","currenPositionPercent","setCurrenPositionPercent","pagesCount","setPagesCount","showControls","setShowControls","textContainerRef","useRef","elementsForHightlightRef","setLoading","queryParams","useParams","parseInt","motionStyle","setMotionStyle","useEffect","current","getElementsForHightlight","getPagesCount","positions","querySelectorAll","o","getAttribute","restoreScrollPoition","openBook","addEventListener","handleScroll","removeEventListener","useDebounce","dtoStyle","useEventListener","gamma","transform","bookTitle","ref","b","e","elementsForHightlight","percent","scrollHeight","getPercentOfScroll","toFixed","round","getNumberOfCurrentPage","posElement","positionElementId","updateBookPosition","screenElement","allElements","onScreen","i","hightLightElementsOnScreen","positionId","toElement","querySelector","scrollIntoView","FormControlStyled","FormControl","CoverImage","appContext","intl","useIntl","handleInputChange","handlerName","handlerParams","checked","InputLabel","formatMessage","Select","labelId","MenuItem","FormLabel","FormControlLabel","control","Switch","PageCoverImage1","PageCoverImage2","PageCoverImage3","TextField","margin","App","libraryStore","useLocalStore","remoteStore","appStore","fetchBooks","Provider","basename","exact","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","app","ReactDOM","render","getElementById","URL","href","origin","fetch","contentType","headers","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4ad6d96a.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/back.adb63b87.svg\";","export default __webpack_public_path__ + \"static/media/home.b0dac3bc.svg\";","export default __webpack_public_path__ + \"static/media/settings.a753d163.svg\";","import { FB2_XSL, FB2_META, FB2_COVER_IMAGE_XSL } from './xsl'\n\nfunction convertWithXSL(text: string, xsl: string) {\n  const parser = new DOMParser()\n  const xsltProcessor = new XSLTProcessor()\n  const xml = parser.parseFromString(text, 'text/xml')\n  const parsedXsl = new window.DOMParser().parseFromString(xsl, 'text/xml')\n  xsltProcessor.importStylesheet(parsedXsl)\n  return xsltProcessor.transformToFragment(xml, document)\n}\n\nexport function getBookPreviewInfo(fb2Book: string) {\n  const rawMeta = convertWithXSL(fb2Book, FB2_META)\n  const meta = rawMeta.textContent ? JSON.parse(rawMeta.textContent) : {}\n  const rawCover = convertWithXSL(fb2Book, FB2_COVER_IMAGE_XSL)\n  const cover = rawCover.textContent\n  return { meta, cover }\n}\n\nexport function parseToInnerBook(fb2Book: string) {\n  const body = convertWithXSL(fb2Book, FB2_XSL)\n  return body.children[0].innerHTML || ''\n}\n\nexport const defaultEncoding = 'utf8'\n\nexport const isDefaultEncoding = (encoding: string) =>\n  encoding === defaultEncoding\n\nexport function getTextEncoding(text: string) {\n  const VRegExp = new RegExp(/<\\?xml[^]+?>/gi)\n  const testString = (VRegExp.exec(text) || [])[0] || ''\n\n  if (testString.includes('windows-1251')) return 'windows-1251'\n  return defaultEncoding\n}\n","const FB2_COVER_IMAGE_XSL = `<?xml version=\"1.0\"?>\n<xsl:stylesheet\n    version=\"1.0\"\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    xmlns:fb=\"http://www.gribuser.ru/xml/fictionbook/2.0\">\n    <xsl:output method=\"text\" omit-xml-declaration=\"yes\" indent=\"no\" encoding=\"UTF-8\"/>\n    <xsl:template match=\"/*\">\n    <xsl:for-each select=\"fb:description/fb:title-info/fb:coverpage/fb:image\">\n        <xsl:call-template name=\"image\"/>\n    </xsl:for-each>\n    </xsl:template>\n    <xsl:template match=\"fb:image\" name=\"image\">\n        <xsl:choose>\n            <xsl:when test=\"starts-with(@xlink:href,'#')\">\n                <xsl:text>data:</xsl:text>\n                <xsl:variable name=\"href\" select=\"substring-after(@xlink:href,'#')\"/>\n                <xsl:value-of select=\"//fb:binary[@id=$href]/@content-type\" disable-output-escaping=\"yes\"/><xsl:text>;base64,</xsl:text>\n                <xsl:value-of select=\"//fb:binary[@id=$href]\" disable-output-escaping=\"yes\"/>\n            </xsl:when>\n            <xsl:otherwise>\n                <xsl:attribute name=\"src\">\n                    <xsl:value-of select=\"@xlink:href\"/>\n                </xsl:attribute>\n            </xsl:otherwise>\n        </xsl:choose>\n    </xsl:template>\n</xsl:stylesheet>`\n\nconst FB2_XSL = `<?xml version=\"1.0\"?>\n<xsl:stylesheet\n        version=\"3.0\"\n        xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n        xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n        xmlns:fb=\"http://www.gribuser.ru/xml/fictionbook/2.0\"\n        >\n    <xsl:output\n            media-type=\"text/html\"\n            method=\"html\"\n            encoding=\"utf-8\"\n            omit-xml-declaration=\"yes\"\n            doctype-public=\"HTML5\"\n            />\n\n    <xsl:key name=\"note-link\" match=\"fb:section\" use=\"@id\"/>\n    <xsl:template match=\"/*\">\n        <div class=\"text\">\n            <xsl:for-each select=\"fb:description/fb:title-info/fb:coverpage/fb:image\">\n                <xsl:call-template name=\"image\"/>\n            </xsl:for-each>\n\n            <xsl:for-each select=\"fb:description/fb:title-info/fb:annotation\">\n                <section class=\"text-annotation\">\n                    <xsl:call-template name=\"annotation\"/>\n                </section>\n            </xsl:for-each>\n\n            <!--<navMap style=\"display: none;\">-->\n                <!--<xsl:apply-templates select=\"fb:body\" mode=\"toc\"/>-->\n            <!--</navMap>-->\n\n\n            <xsl:for-each select=\"fb:body\">\n                <xsl:if test=\"position() != 1\">\n                    <div class=\"separator\"></div>\n                </xsl:if>\n\n                <!--<xsl:if test=\"not(fb:title) and @name\">-->\n                    <!--<h4 align=\"center\">-->\n                        <!--<xsl:value-of select=\"@name\"/>-->\n                    <!--</h4>-->\n                <!--</xsl:if>-->\n\n                <div class=\"text-wrapper\">\n                    <xsl:apply-templates/>\n                </div>\n\n            </xsl:for-each>\n        </div>\n    </xsl:template>\n    <!-- author template -->\n    <xsl:template name=\"author\">\n        <xsl:value-of select=\"fb:first-name\"/>\n        <xsl:text disable-output-escaping=\"no\">&#032;</xsl:text>\n        <xsl:value-of select=\"fb:middle-name\"/>&#032;\n        <xsl:text disable-output-escaping=\"no\">&#032;</xsl:text>\n        <xsl:value-of select=\"fb:last-name\"/>\n        <br/>\n    </xsl:template>\n    <!-- secuence template -->\n    <xsl:template name=\"sequence\">\n        <xsl:value-of select=\"@name\"/>\n        <xsl:if test=\"@number\">\n            <xsl:text disable-output-escaping=\"no\">,&#032;#</xsl:text>\n            <xsl:value-of select=\"@number\"/>\n        </xsl:if>\n        <xsl:if test=\"fb:sequence\">\n            <ul>\n                <xsl:for-each select=\"fb:sequence\">\n                    <xsl:call-template name=\"sequence\"/>\n                </xsl:for-each>\n            </ul>\n        </xsl:if>\n    </xsl:template>\n    <!-- toc template -->\n    <xsl:template match=\"fb:section|fb:body\" mode=\"toc\">\n        <xsl:choose>\n            <xsl:when test=\"name()='body' and position()=1 and not(fb:title)\">\n                <xsl:apply-templates select=\"fb:section\" mode=\"toc\"/>\n            </xsl:when>\n            <xsl:otherwise>\n                <navPoint>\n                    <navLabel>\n                        <text>\n                            <xsl:value-of select=\"normalize-space(fb:title | @name)\"/>\n                        </text>\n                    </navLabel>\n                    <content src=\"#TOC_{generate-id()}\"></content>\n                    <!--<xsl:value-of select=\"normalize-space(fb:title | //fb:body/@name)\"/>-->\n                    <!--<xsl:value-of select=\"normalize-space(fb:body[@name == 'notes']/@name | fb:body/title)\"/>-->\n\n                    <!-- fb:body[@name = 'notes'] -->\n                    <xsl:if test=\"fb:section\">\n                        <navPoint>\n                            <xsl:apply-templates select=\"fb:section\" mode=\"toc\"/>\n                        </navPoint>\n                    </xsl:if>\n                </navPoint>\n            </xsl:otherwise>\n        </xsl:choose>\n    </xsl:template>\n    <!-- description -->\n    <xsl:template match=\"fb:description\">\n        <xsl:apply-templates/>\n    </xsl:template>\n    <!-- body -->\n    <xsl:template match=\"fb:body\">\n        <div>\n            <xsl:apply-templates/>\n        </div>\n    </xsl:template>\n\n    <xsl:template match=\"fb:section\">\n        <section>\n            <xsl:attribute name=\"class\">\n                <xsl:text>default-section</xsl:text>\n                <xsl:if test=\"starts-with(translate(fb:title, 'ГЛАВА', 'глава'), 'глава')\">\n                    <xsl:text> chapter</xsl:text>\n                </xsl:if>\n            </xsl:attribute>\n            <a name=\"TOC_{generate-id()}\"></a>\n            <xsl:if test=\"@id\">\n                <xsl:element name=\"a\">\n                    <xsl:attribute name=\"name\">\n                        <xsl:value-of select=\"@id\"/>\n                    </xsl:attribute>\n                </xsl:element>\n            </xsl:if>\n            <xsl:apply-templates/>\n        </section>\n    </xsl:template>\n    <xsl:template match=\"fb:body[@name='notes']//fb:section\">\n        <div>\n            <xsl:if test=\"@id\">\n                <xsl:attribute name=\"class\">\n                    <xsl:value-of select=\"'annotation'\"/>\n                </xsl:attribute>\n            </xsl:if>\n            <a name=\"TOC_{generate-id()}\"></a>\n            <xsl:if test=\"@id\">\n                <xsl:element name=\"a\">\n                    <xsl:attribute name=\"name\">\n                        <xsl:value-of select=\"@id\"/>\n                    </xsl:attribute>\n                </xsl:element>\n            </xsl:if>\n            <xsl:apply-templates/>\n        </div>\n    </xsl:template>\n\n\n    <!-- section/title -->\n    <xsl:template match=\"fb:section/fb:title|fb:poem/fb:title\">\n        <xsl:choose>\n            <xsl:when test=\"count(ancestor::node()) &lt; 9\">\n                <xsl:element name=\"{concat('h',count(ancestor::node())-3)}\">\n                    <a name=\"TOC_{generate-id()}\"></a>\n                    <xsl:if test=\"@id\">\n                        <xsl:element name=\"a\">\n                            <xsl:attribute name=\"name\">\n                                <xsl:value-of select=\"@id\"/>\n                            </xsl:attribute>\n                        </xsl:element>\n                    </xsl:if>\n                    <xsl:apply-templates/>\n                </xsl:element>\n            </xsl:when>\n            <xsl:otherwise>\n                <xsl:element name=\"h6\">\n                    <xsl:if test=\"@id\">\n                        <xsl:element name=\"a\">\n                            <xsl:attribute name=\"name\">\n                                <xsl:value-of select=\"@id\"/>\n                            </xsl:attribute>\n                        </xsl:element>\n                    </xsl:if>\n                    <xsl:apply-templates/>\n                </xsl:element>\n            </xsl:otherwise>\n        </xsl:choose>\n    </xsl:template>\n    <!-- section/title -->\n    <xsl:template match=\"fb:body/fb:title\">\n        <!--<h1 style=\"display: none;\">-->\n            <!--<xsl:apply-templates mode=\"title\"/>-->\n        <!--</h1>-->\n    </xsl:template>\n    <xsl:template match=\"fb:body[@name='notes']/fb:title\">\n        <h1>\n            <xsl:apply-templates mode=\"title\"/>\n        </h1>\n    </xsl:template>\n\n    <xsl:template match=\"fb:title/fb:p\">\n        <xsl:apply-templates/>\n        <xsl:text disable-output-escaping=\"no\">&#032;</xsl:text>\n        <br/>\n    </xsl:template>\n    <!-- subtitle -->\n    <xsl:template match=\"fb:subtitle\">\n        <xsl:if test=\"@id\">\n            <xsl:element name=\"a\">\n                <xsl:attribute name=\"name\">\n                    <xsl:value-of select=\"@id\"/>\n                </xsl:attribute>\n            </xsl:element>\n        </xsl:if>\n        <h5>\n            <xsl:apply-templates/>\n        </h5>\n    </xsl:template>\n    <!-- p -->\n    <xsl:template match=\"fb:p\">\n        <!--<xsl:if test\"preceding-sibling::*[1][name()] != 'fb:image'\">-->\n            <p data-id=\"{position()}-{last()}}\">\n                <xsl:if test=\"@id\">\n                    <xsl:element name=\"a\">\n                        <xsl:attribute name=\"name\">\n                            <xsl:value-of select=\"@id\"/>\n                        </xsl:attribute>\n                    </xsl:element>\n                </xsl:if>\n                <xsl:apply-templates/>\n            </p>\n        <!--</xsl:if>-->\n    </xsl:template>\n    <!-- strong -->\n    <xsl:template match=\"fb:strong\">\n        <b>\n            <xsl:apply-templates/>\n        </b>\n    </xsl:template>\n    <!-- emphasis -->\n    <xsl:template match=\"fb:emphasis\">\n        <i>\n            <xsl:apply-templates/>\n        </i>\n    </xsl:template>\n    <!-- style -->\n    <xsl:template match=\"fb:style\">\n        <span class=\"{@name}\">\n            <xsl:apply-templates/>\n        </span>\n    </xsl:template>\n    <!-- empty-line -->\n    <xsl:template match=\"fb:empty-line\">\n        <xsl:if test=\"following-sibling::*[1] != fb:image\">\n            <br/>\n        </xsl:if>\n    </xsl:template>\n    <!-- link -->\n    <xsl:template match=\"fb:a\">\n        <xsl:choose>\n            <xsl:when test=\"starts-with(@xlink:href,'#')\">\n                <xsl:element name=\"a\">\n                    <xsl:attribute name=\"class\">\n                        <xsl:value-of select=\"'footnote'\"/>\n                    </xsl:attribute>\n                    <xsl:attribute name=\"href\">\n                        <xsl:value-of select=\"@xlink:href\"/>\n                    </xsl:attribute>\n                    <xsl:attribute name=\"title\">\n                        <xsl:value-of select=\"key('note-link',substring-after(@xlink:href,'#'))/fb:p\"/>\n                    </xsl:attribute>\n                    <xsl:choose>\n                        <xsl:when test=\"(@type) = 'note'\">\n                            <sup>\n                                <xsl:apply-templates/>\n                            </sup>\n                        </xsl:when>\n                        <xsl:otherwise>\n                            <xsl:apply-templates/>\n                        </xsl:otherwise>\n                    </xsl:choose>\n                </xsl:element>\n            </xsl:when>\n            <xsl:otherwise>\n                <xsl:element name=\"span\">\n                    <xsl:choose>\n                        <xsl:when test=\"(@type) = 'note'\">\n                            <sup>\n                                <xsl:apply-templates/>\n                            </sup>\n                        </xsl:when>\n                        <xsl:otherwise>\n                            <xsl:apply-templates/>\n                        </xsl:otherwise>\n                    </xsl:choose>\n                </xsl:element>\n            </xsl:otherwise>\n        </xsl:choose>\n    </xsl:template>\n    <!-- annotation -->\n    <xsl:template name=\"annotation\">\n        <xsl:if test=\"@id\">\n            <xsl:element name=\"a\">\n                <xsl:attribute name=\"name\">\n                    <xsl:value-of select=\"@id\"/>\n                </xsl:attribute>\n            </xsl:element>\n        </xsl:if>\n        <xsl:apply-templates/>\n    </xsl:template>\n    <!-- epigraph -->\n    <xsl:template match=\"fb:epigraph\">\n        <blockquote class=\"epigraph\">\n            <xsl:if test=\"@id\">\n                <xsl:element name=\"a\">\n                    <xsl:attribute name=\"name\">\n                        <xsl:value-of select=\"@id\"/>\n                    </xsl:attribute>\n                </xsl:element>\n            </xsl:if>\n            <xsl:apply-templates/>\n        </blockquote>\n    </xsl:template>\n    <!-- epigraph/text-author -->\n    <xsl:template match=\"fb:epigraph/fb:text-author\">\n        <blockquote class=\"author\">\n            <i>\n                <xsl:apply-templates/>\n            </i>\n        </blockquote>\n    </xsl:template>\n    <!-- cite -->\n    <xsl:template match=\"fb:cite\">\n        <blockquote>\n            <xsl:if test=\"@id\">\n                <xsl:element name=\"a\">\n                    <xsl:attribute name=\"name\">\n                        <xsl:value-of select=\"@id\"/>\n                    </xsl:attribute>\n                </xsl:element>\n            </xsl:if>\n            <xsl:apply-templates/>\n        </blockquote>\n    </xsl:template>\n    <!-- cite/text-author -->\n    <xsl:template match=\"fb:text-author\">\n        <blockquote>\n            <i>\n                <xsl:apply-templates/>\n            </i>\n        </blockquote>\n    </xsl:template>\n    <!-- date -->\n    <xsl:template match=\"fb:date\">\n        <xsl:choose>\n            <xsl:when test=\"not(@value)\">\n                &#160;&#160;&#160;\n                <xsl:apply-templates/>\n                <br/>\n            </xsl:when>\n            <xsl:otherwise>\n                &#160;&#160;&#160;<xsl:value-of select=\"@value\"/>\n                <br/>\n            </xsl:otherwise>\n        </xsl:choose>\n    </xsl:template>\n    <!-- poem -->\n    <xsl:template match=\"fb:poem\">\n        <blockquote>\n            <xsl:if test=\"@id\">\n                <xsl:element name=\"a\">\n                    <xsl:attribute name=\"name\">\n                        <xsl:value-of select=\"@id\"/>\n                    </xsl:attribute>\n                </xsl:element>\n            </xsl:if>\n            <xsl:apply-templates/>\n        </blockquote>\n    </xsl:template>\n\n    <!-- stanza -->\n    <xsl:template match=\"fb:stanza\">\n        <xsl:apply-templates/>\n        <br/>\n    </xsl:template>\n    <!-- v -->\n    <xsl:template match=\"fb:v\">\n        <xsl:if test=\"@id\">\n            <xsl:element name=\"a\">\n                <xsl:attribute name=\"name\">\n                    <xsl:value-of select=\"@id\"/>\n                </xsl:attribute>\n            </xsl:element>\n        </xsl:if>\n        <xsl:apply-templates/>\n        <br/>\n    </xsl:template>\n    <!-- image -->\n    <xsl:template match=\"fb:image\" name=\"image\">\n        <div>\n            <xsl:choose>\n                <xsl:when test=\"ancestor::fb:coverpage\">\n                    <xsl:attribute name=\"class\">\n                        <xsl:value-of select=\"'text-cover'\"/>\n                    </xsl:attribute>\n                </xsl:when>\n                <xsl:otherwise>\n                    <xsl:attribute name=\"class\">\n                        <xsl:text>default image</xsl:text>\n                    </xsl:attribute>\n                </xsl:otherwise>\n            </xsl:choose>\n            <div class=\"image-wrapper\">\n                <img>\n                    <xsl:choose>\n                        <xsl:when test=\"starts-with(@xlink:href,'#')\">\n                            <xsl:attribute name=\"src\">\n                                <xsl:text>data:</xsl:text>\n                                <xsl:variable name=\"href\" select=\"substring-after(@xlink:href,'#')\"/>\n                                <set variable=\"href\" expression=\"substring-after(@xlink:href,'#')\"/>\n                                <xsl:value-of select=\"//fb:binary[@id=$href]/@content-type\" disable-output-escaping=\"yes\"/><xsl:text>;base64,</xsl:text>\n                                <!--<xsl:value-of select=\"substring-after(@xlink:href,'#')\"/>-->\n                                <xsl:value-of select=\"//fb:binary[@id=$href]\" disable-output-escaping=\"yes\"/>\n                            </xsl:attribute>\n\n                        </xsl:when>\n                        <xsl:otherwise>\n                            <xsl:attribute name=\"src\">\n                                <xsl:value-of select=\"@xlink:href\"/>\n                            </xsl:attribute>\n                        </xsl:otherwise>\n                    </xsl:choose>\n                </img>\n            </div>\n            <xsl:if test=\"following-sibling::node()[1]/fb:emphasis\">\n                <div class=\"image-annotation\">\n                    <xsl:apply-templates select=\"following-sibling::fb:p[1]\"/>\n                </div>\n            </xsl:if>\n        </div>\n    </xsl:template>\n</xsl:stylesheet>`\n\nconst FB2_META = `<?xml version=\"1.0\"?>\n<xsl:stylesheet\n    version=\"3.0\"\n    xmlns:xsl=\"http://www.w3.org/1999/XSL/Transform\"\n    xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n    xmlns:fb=\"http://www.gribuser.ru/xml/fictionbook/2.0\">\n    <xsl:output method=\"text\" omit-xml-declaration=\"yes\" indent=\"no\" encoding=\"UTF-8\"/>\n<xsl:template match=\"/*\">{<xsl:for-each select=\"fb:description/fb:title-info\">\t\n    \"title\": \"<xsl:value-of select=\"fb:book-title\" />\",\n    \"genre\": \"<xsl:value-of select=\"fb:genre\" />\",\n    \"author\": {\n        \"firstName\": \"<xsl:value-of select=\"fb:author/fb:first-name\" />\",\n        \"lastName\": \"<xsl:value-of select=\"fb:author/fb:last-name\" />\"\n    },\n    \"date\": \"<xsl:value-of select=\"fb:date\" />\",\n    \"keywords\": \"<xsl:value-of select=\"fb:keywords\" />\",\n    \"lang\": \"<xsl:value-of select=\"fb:lang\" />\"\n</xsl:for-each>}</xsl:template>\n</xsl:stylesheet>`\n\nexport { FB2_XSL, FB2_META, FB2_COVER_IMAGE_XSL }\n","import { BookList } from '../types'\nimport {\n  defaultEncoding,\n  getTextEncoding,\n  isDefaultEncoding,\n} from './converter'\n\nexport async function getBooksList(): Promise<BookList> {\n  return fetch('db.json').then((resp) => resp.json())\n}\n\nexport async function getBook(filePath: string): Promise<string> {\n  return fetch(filePath).then((resp) => resp.text())\n}\n\nexport async function readFile(\n  file: File,\n  encoding: string = defaultEncoding\n): Promise<string> {\n  const reader = new FileReader()\n  return new Promise((resolve, reject) => {\n    reader.onload = (event) => {\n      const result = event?.target?.result\n      if (result && typeof result === 'string') {\n        return resolve(result)\n      }\n      return reject('')\n    }\n    reader.onerror = (error) => reject('error reading file' + error)\n\n    reader.readAsText(file, encoding)\n  })\n}\nexport async function readFileContent(file: File): Promise<string> {\n  const text = await readFile(file)\n  const encoding = getTextEncoding(text)\n  if (isDefaultEncoding(encoding)) return text\n  return await readFile(file, encoding)\n}\n\nexport const debounce = <F extends (...args: any[]) => any>(\n  func: F,\n  waitFor: number\n) => {\n  let timeout: ReturnType<typeof setTimeout> | null = null\n\n  const debounced = (...args: Parameters<F>) => {\n    if (timeout !== null) {\n      clearTimeout(timeout)\n      timeout = null\n    }\n    timeout = setTimeout(() => func(...args), waitFor)\n  }\n\n  return debounced as (...args: Parameters<F>) => ReturnType<F>\n}\n\nexport function importScript(src: string) {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement('script')\n    document.body.appendChild(script)\n    script.onload = resolve\n    script.onerror = reject\n    script.async = true\n    script.src = src\n    return src;\n  })\n}\n","import { importScript } from './common'\n\ninterface Files {\n  id: string\n}\n\nlet loaded = false\nexport async function loadGapi() {\n  if (loaded) return true\n  return importScript('https://apis.google.com/js/client:platform.js')\n    .then(() => {\n      return new Promise((resolve, reject) =>\n        window.gapi.load('auth2', () => resolve(window.gapi.auth2))\n      )\n    })\n    .then(() => {\n      loaded = true\n      return loaded\n    })\n    .catch(() => {\n      console.error('google api is not loaded')\n    })\n}\n\nlet isGAPILoaded = false\nconst googleDriveAPIDocument =\n  'https://www.googleapis.com/discovery/v1/apis/drive/v3/rest'\nconst scope =\n  'https://www.googleapis.com/auth/drive.appfolder https://www.googleapis.com/auth/drive'\nexport async function load() {\n  if (isGAPILoaded) return\n  await loadGapi()\n  return new Promise((resolve, reject) => {\n    return window.gapi.client\n      .init({\n        apiKey: process.env.REACT_APP_GOOGLE_API_KEY,\n        clientId: process.env.REACT_APP_GOOGLE_CLIENT_ID,\n        discoveryDocs: [googleDriveAPIDocument],\n        scope: scope,\n      })\n      .then(() => (isGAPILoaded = true))\n      .then(resolve)\n      .catch(reject)\n  })\n}\n\nexport async function signIn() {\n  await load()\n  try {\n    return window.gapi.auth2.getAuthInstance().signIn()\n  } catch (e) {\n    console.error('error in signIn', e)\n  }\n}\n\nexport async function signOut() {\n  await load()\n  try {\n    return window.gapi.auth2.getAuthInstance().signOut()\n  } catch (e) {\n    console.error('error in signOut', e)\n  }\n}\n\nexport async function isLoggedIn() {\n  await load()\n  try {\n    return (\n      window.gapi.auth2.getAuthInstance() &&\n      window.gapi.auth2.getAuthInstance().isSignedIn.get()\n    )\n  } catch (e) {\n    console.error('error in isLoggedIn', e)\n    return false\n  }\n}\nconst folderMIME = 'application/vnd.google-apps.folder'\nconst fileMIME = 'text/plain'\n\nconst create = (spaces: string) => (type: string) => async (\n  name: string,\n  folderId?: string\n) => {\n  console.log(spaces, type, name, folderId)\n  const mimeType = type === 'folder' ? folderMIME : fileMIME\n  const parents = folderId ? [folderId] : spaces === 'drive' ? [] : [spaces]\n  const response = await promisify(gapi.client.drive.files.create, {\n    resource: {\n      name,\n      mimeType,\n      parents,\n    },\n    fields: '*',\n  })\n  return response.result\n}\n\nconst find = (spaces: string) => (type: string) => async (query: string) => {\n  const mimeType =\n    type === 'folder'\n      ? `and mimeType = '${folderMIME}'`\n      : `and not mimeType = '${folderMIME}'`\n  const q = `${query} ${mimeType}`\n  let ret: any = []\n  try {\n    let token\n    do {\n      const response: any = await promisify(\n        window.gapi.client.drive.files.list,\n        {\n          spaces,\n          fields: '*',\n          pageSize: 100,\n          pageToken: token,\n          orderBy: 'createdTime',\n          q,\n        }\n      )\n      ret = ret.concat(response.result.files)\n      token = response.result.nextPageToken\n    } while (token)\n\n    return ret\n  } catch (e) {\n    console.error('can`t list items in drive with query: ', query, e)\n  }\n}\n\nconst download = async (fileId: string) => {\n  const resp = await promisify(gapi.client.drive.files.get, {\n    fileId: fileId,\n    alt: 'media',\n  })\n\n  return resp.result || resp.body\n}\nconst remove = async (fileId: string) => {\n  try {\n    await promisify(gapi.client.drive.files.delete, {\n      fileId: fileId,\n    })\n    return true\n  } catch (err) {\n    if (err.status === 404) {\n      return false\n    }\n    throw err\n  }\n}\n\nconst getOrCreate = (spaces: string) => (type: string) => async (\n  q: string,\n  name: string,\n  folderId?: string\n) => {\n  const exist = await find(spaces)(type)(q)\n  return exist.length ? exist : [await create(spaces)(type)(name, folderId)]\n}\n\nconst upload = (spaces: string) => async (fileId: string, content: string) => {\n  try {\n    const response: any = await promisify(gapi.client.request, {\n      spaces: spaces === 'drive' ? [] : [spaces],\n      path: `/upload/drive/v3/files/${fileId}`,\n      method: 'PATCH',\n      params: { uploadType: 'media' },\n      body: typeof content === 'string' ? content : JSON.stringify(content),\n    })\n    return response.result\n  } catch (e) {\n    console.error('can`t upload file with: ', fileId, content, e)\n  }\n}\n\nfunction promisify(\n  gapiFn: any,\n  options: any\n): Promise<gapi.client.Response<Files>> {\n  return new Promise((resolve, reject) => {\n    return gapiFn(options).then(\n      (resp: any) => {\n        if (resp && (resp.status < 200 || resp.status > 299)) {\n          console.error('GAPI call returned bad status', resp)\n          reject(resp)\n        } else {\n          resolve(resp)\n        }\n      },\n      (err: any) => {\n        return reject(err)\n      }\n    )\n  })\n}\n\nconst createInDrive = create('drive')\nconst findInDrive = find('drive')\nconst getOrCreateInDrive = getOrCreate('drive')\nconst uploadInDrive = upload('drive')\nexport const drive = {\n  getOrCreate: {\n    folder: getOrCreateInDrive('folder'),\n    file: getOrCreateInDrive('file'),\n  },\n  create: {\n    folder: createInDrive('folder'),\n    file: createInDrive('file'),\n  },\n  find: {\n    folder: findInDrive('folder'),\n    file: findInDrive('file'),\n  },\n  upload: uploadInDrive,\n  download,\n  remove,\n}\n\nconst createInAppFolder = create('appDataFolder')\nconst findInAppFolder = find('appDataFolder')\nconst getOrCreateInAppFolder = getOrCreate('appDataFolder')\nconst uploadOnAppFolder = upload('appDataFolder')\nexport const appFolder = {\n  getOrCreate: {\n    foder: getOrCreateInAppFolder('folder'),\n    file: getOrCreateInAppFolder('file'),\n  },\n  create: {\n    folder: createInAppFolder('folder'),\n    file: createInAppFolder('file'),\n  },\n  find: {\n    folder: find('folder'),\n    file: findInAppFolder('file'),\n  },\n  upload: uploadOnAppFolder,\n  download,\n  remove,\n}\n","import React from 'react'\nimport { observable, action } from 'mobx'\nimport { createIntl, createIntlCache } from 'react-intl'\n\nimport en_messages from '../translations/locales/en.json'\nimport ru_messages from '../translations/locales/ru.json'\nimport * as cloud from '../uitls/cloud'\n\nexport const AppStore = () => {\n  const globalIntlCache = createIntlCache()\n\n  createIntl({ locale: 'ru', messages: ru_messages }, globalIntlCache)\n  createIntl({ locale: 'en', messages: en_messages }, globalIntlCache)\n\n  const defaultLocale = 'en'\n  const messages = {\n    en: en_messages,\n    ru: ru_messages,\n  } as {\n    [key: string]: any\n  }\n\n  const setLocale = action((locale: string) => {\n    if (Object.keys(messages).includes(locale)) {\n      store.locale = locale\n    } else {\n      throw Error('Unsupported locale')\n    }\n  })\n\n  const setImageCoverAction = action((image: string) => store.imageCover = image)\n\n  const getLocaleMessages = action(() => {\n    const locale = store.locale\n    return messages[locale]\n  })\n\n  const toggleHightligting = action((value: boolean) => {\n    store.wordsHighlight = value\n  })\n\n  const toggleDynamicTextOrientation = action((value: boolean) => {\n    store.dynamicTextOrientation = value\n  })\n\n  const setPageColor = action((value: string) => {\n    store.pageColor = value\n  })\n\n  const toggleUseImageCover = action((value: boolean) => {\n    store.isUseImageCover = value\n  })\n\n  const setPageBackgroundColorAction = action((value: string) => {\n    store.pageBackgroundColor = value\n  })\n\n  cloud.load().then((x) => {\n    store.isClientLoaded = true\n    cloud.isLoggedIn().then((isLoggedIn) => (store.isLoggedIn = isLoggedIn))\n  })\n\n  const signInAction = action(async () => {\n    await cloud.signIn()\n    store.isLoggedIn = await cloud.isLoggedIn()\n  })\n\n  const signOutAction = action(async () => {\n    await cloud.signOut()\n    store.isLoggedIn = await cloud.isLoggedIn()\n    // store.books = []\n  })\n\n  \n  const store = observable({\n    defaultLocale,\n    locale: defaultLocale,\n    wordsHighlight: true,\n    dynamicTextOrientation: false,\n    pageColor: 'white',\n    pageBackgroundColor: '#0000',\n    messages,\n    isLoggedIn: false,\n    isClientLoaded: false,\n    isUseImageCover: true,\n    imageCover: '1',\n    setImageCoverAction, \n    toggleUseImageCover,\n    signInAction,\n    signOutAction,\n    toggleHightligting,\n    toggleDynamicTextOrientation,\n    setLocale,\n    setPageColor,\n    setPageBackgroundColorAction,\n    getLocaleMessages,\n  })\n\n  return store\n}\nexport default React.createContext<any>({})\n","import React, { useContext } from 'react'\nimport AppStoreContext from '../../store/AppStore'\nimport { observer } from 'mobx-react'\nimport Button from '@material-ui/core/Button'\n\nexport default observer(function SignInButton() {\n  const {\n    isClientLoaded,\n    isLoggedIn,\n    signInAction,\n    signOutAction,\n  } = useContext(AppStoreContext)\n  return (\n    <>\n      {isClientLoaded && (\n        <>\n          {isLoggedIn ? (\n            <Button onClick={signOutAction} color=\"inherit\">\n              LogOut\n            </Button>\n          ) : (\n            <Button onClick={signInAction} color=\"inherit\">\n              Login\n            </Button>\n          )}\n        </>\n      )}\n    </>\n  )\n})\n","import { openDB, DBSchema } from 'idb'\nimport { Book } from '../types'\n\nconst DB_VERSION = 1\nconst DB_NAME = 'library'\nconst DB_INDEX_NAME = 'index'\nconst DB_STORE_NAME = 'books'\n\ninterface LibraryDB extends DBSchema {\n  [DB_INDEX_NAME]: {\n    key: number\n    value: Book\n  }\n  [DB_STORE_NAME]: {\n    key: number\n    value: string\n  }\n}\n\nconst dbPromise = openDB<LibraryDB>(DB_NAME, DB_VERSION, {\n  upgrade(db, oldVersion) {\n    if (oldVersion < 1) {\n      db.createObjectStore(DB_INDEX_NAME, { keyPath: 'id' })\n      db.createObjectStore(DB_STORE_NAME, { autoIncrement: true })\n    }\n  },\n})\n\nconst txPromise = async () =>\n  (await dbPromise).transaction([DB_INDEX_NAME, DB_STORE_NAME], 'readwrite')\n\nconst libraryDB = {\n  async getBookMeta(id: number) {\n    return (await dbPromise).get(DB_INDEX_NAME, id)\n  },\n  async getAllMeta() {\n    return (await dbPromise).getAll(DB_INDEX_NAME)\n  },\n  async getBookText(id: number): Promise<string> {\n    const result = await (await dbPromise).get(DB_STORE_NAME, id)\n    if (!result) {\n      throw Error(`can not find book ${id} in the locale db`)\n    } else {\n      return result\n    }\n  },\n  async addBook(meta: any, body: string = ''): Promise<Book> {\n    const timestamp = Date.now()\n    const tx = await txPromise()\n    const id = await tx.objectStore(DB_STORE_NAME).add(body)\n    const book: Book = { ...meta, id, timestamp }\n\n    await tx.objectStore(DB_INDEX_NAME).add(book)\n    await tx.done\n    return book\n  },\n  async updateBookMeta(bookId: number, updatedProps: any) {\n    const tx = await txPromise()\n    const store = tx.objectStore(DB_INDEX_NAME)\n    const oldBook = await store.get(bookId)\n    const updatedBook = { ...oldBook, ...updatedProps }\n    await store.put(updatedBook)\n    await tx.done\n    return updatedBook\n  },\n  async delete(bookId: number) {\n    const tx = await txPromise()\n    await tx.objectStore(DB_INDEX_NAME).delete(bookId)\n    await tx.objectStore(DB_STORE_NAME).delete(bookId)\n    await tx.done\n  },\n  async clear() {\n    const tx = await txPromise()\n    await tx.objectStore(DB_INDEX_NAME).clear()\n    await tx.objectStore(DB_STORE_NAME).clear()\n    await tx.done\n  },\n}\n\nexport default libraryDB\n","import React from 'react'\nimport { observable, action } from 'mobx'\nimport libraryDB from '../uitls/clientDB'\nimport { BookList, Book } from '../types'\nimport * as converter from '../uitls/converter'\n\nexport const LibraryStore = () => {\n  const fetchBooksListAction = action(async () => {\n    store.books = await libraryDB.getAllMeta()\n    console.info('book store', store.books)\n  })\n\n  const addBookAction = action(async (rawBookText: string, file: File) => {\n    const { cover, meta } = converter.getBookPreviewInfo(rawBookText)\n    const newBook = {\n      name: file.name,\n      meta,\n      cover,\n    }\n\n    store.isAddingBookInProcess = true\n    const book = await libraryDB.addBook(newBook, rawBookText)\n    store.books.push(book)\n    store.isAddingBookInProcess = false\n  })\n\n  const syncBookAction = action(async (meta: Book, body: string) => {\n    const book = await libraryDB.addBook(meta, body)\n    store.books.push(book)\n  })\n\n  const removeBookAction = action(async (book: Book) => {\n    await libraryDB.delete(book.id)\n    const bookIndex = store.books.indexOf(book)\n    store.books.splice(bookIndex, 1)\n  })\n\n  const updateBookPositionAction = action(\n    async (bookId: number, positionElement: string) => {\n      await libraryDB.updateBookMeta(bookId, { positionElement })\n    }\n  )\n\n  const updateBookAction = action(async (bookId: number, bookProps: any) => {\n    const bookInStore = store.books.find((book) => book.id === bookId)\n    if (bookInStore) {\n      Object.assign(bookInStore, bookProps)\n    }\n    await libraryDB.updateBookMeta(bookId, bookProps)\n  })\n\n  const openBookAction = action(async (bookId: number) => {\n    if (store.currentBook!.info!.id === bookId) {\n      store.currentBook.info = await libraryDB.getBookMeta(bookId)\n      return Promise.resolve()\n    }\n    return Promise.all([\n      libraryDB.getBookMeta(bookId),\n      libraryDB.getBookText(bookId),\n    ]).then((prom) => {\n      store.currentBook.info = prom[0]\n      const text = prom[1] || ''\n      store.currentBook.text = converter.parseToInnerBook(text)\n    })\n  })\n\n  const fetchBookTextAction = action(\n    async (bookId: number) => await libraryDB.getBookText(bookId)\n  )\n\n  const store = observable({\n    books: [] as BookList,\n    remoteBooks: [] as BookList,\n    currentBook: {\n      info: {} as Book | undefined,\n      text: '' as string | undefined,\n    },\n    isAddingBookInProcess: false,\n    fetchBooksListAction,\n    fetchBookTextAction,\n    addBookAction,\n    openBookAction,\n    syncBookAction,\n    removeBookAction,\n    updateBookAction,\n    updateBookPositionAction,\n  })\n\n  return store\n}\nexport default React.createContext<any>({})\n","import React, { useContext, useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Drawer from '@material-ui/core/Drawer'\nimport List from '@material-ui/core/List'\nimport Divider from '@material-ui/core/Divider'\nimport ListItem from '@material-ui/core/ListItem'\nimport ListItemIcon from '@material-ui/core/ListItemIcon'\nimport ListItemText from '@material-ui/core/ListItemText'\nimport LibraryBooksIcon from '@material-ui/icons/LibraryBooks'\nimport AppBar from '@material-ui/core/AppBar'\nimport Toolbar from '@material-ui/core/Toolbar'\nimport Typography from '@material-ui/core/Typography'\nimport IconButton from '@material-ui/core/IconButton'\nimport MenuIcon from '@material-ui/icons/Menu'\nimport { Link, useLocation } from 'react-router-dom'\nimport TuneIcon from '@material-ui/icons/Tune'\nimport DashboardIcon from '@material-ui/icons/Dashboard'\nimport { AuthButtons } from '../controls'\nimport LibraryStoreContext from '../../store/LibraryStore'\nimport styled from 'styled-components'\n\nconst TopHeightWorkaround = styled.div``\nconst Title = styled(Typography)`\n    overflow: hidden;\n    text-overflow: ellipsis;\n    white-space: nowrap;\n    flex-grow: 1;\n`\nconst useStyles = makeStyles({\n  list: {\n    width: 250,\n  },\n  menuButton: {\n    marginRight: '',\n  },\n  title: {\n    flexGrow: 1,\n  },\n})\n\nexport default observer(function Header({ children, className = '', title }: any) {\n  const classes = useStyles()\n  const [isOpen, setIsOpen] = useState(false)\n  const location = useLocation()\n  const pathTitleMap: any = {\n    '/': 'Library',\n    '/settings': 'Settings',\n  }\n  const pathname: string = location.pathname || ''\n  const headTitle = title || pathTitleMap[pathname]\n  const { currentBook } = useContext(LibraryStoreContext)\n\n  const toggleDrawer = (state: boolean) => (event: any) => {\n    if (\n      event.type === 'keydown' &&\n      (event.key === 'Tab' || event.key === 'Shift')\n    ) {\n      return\n    }\n    setIsOpen(state)\n  }\n  const list = () => (\n    <div\n      className={classes.list}\n      role=\"presentation\"\n      onClick={toggleDrawer(false)}\n      onKeyDown={toggleDrawer(false)}\n    >\n      <List>\n        {currentBook?.meta?.meta && (\n          <Link to={`/read/${currentBook.meta.id}`}>\n            <ListItem button>\n              <ListItemIcon>\n                <LibraryBooksIcon />\n              </ListItemIcon>\n              <ListItemText primary={currentBook.meta.meta.title} />\n            </ListItem>\n          </Link>\n        )}\n        <Link to=\"/\">\n          <ListItem button>\n            <ListItemIcon>\n              <DashboardIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Home\" />\n          </ListItem>\n        </Link>\n\n        <Link to=\"/settings\">\n          <ListItem button>\n            <ListItemIcon>\n              <TuneIcon />\n            </ListItemIcon>\n            <ListItemText primary=\"Settings\" />\n          </ListItem>\n        </Link>\n      </List>\n      <Divider />\n    </div>\n  )\n  return (\n    <>\n      <TopHeightWorkaround>\n        <AppBar />\n        <Toolbar />\n      </TopHeightWorkaround>\n      <AppBar position=\"fixed\">\n        <Toolbar>\n          <IconButton\n            edge=\"start\"\n            className={classes.menuButton}\n            color=\"inherit\"\n            aria-label=\"menu\"\n          >\n            <React.Fragment>\n              <MenuIcon onClick={toggleDrawer(true)} />\n              <Drawer anchor=\"left\" open={isOpen} onClose={toggleDrawer(false)}>\n                {list()}\n              </Drawer>\n            </React.Fragment>\n          </IconButton>\n          <Title variant=\"h6\" >\n            {headTitle}\n          </Title>\n          {children}\n          <AuthButtons />\n        </Toolbar>\n      </AppBar>\n    </>\n  )\n})\n","import React from 'react'\nimport { observable, action } from 'mobx'\nimport { Book } from '../types'\nimport * as cloud from '../uitls/cloud'\nimport libraryDB from '../uitls/clientDB'\n\nexport const RemoteLibraryStore = () => {\n  const remoteFolderName = 'careful-reader'\n  const initLibrary = action(async () => {\n    cloud.drive.create.folder('books-folder')\n  })\n  cloud.load().then(() => {\n    store.isClientLoaded = true\n    cloud.isLoggedIn().then((isLoggedIn) => (store.isLoggedIn = isLoggedIn))\n  })\n  const cloudAppFolder = cloud.appFolder\n  const cloudDrive = cloud.drive\n  const fetchBooksListAction = action(async () => {\n    store.isBooksLoading = true\n    const cloudFiles = await cloudAppFolder.find.file(\n      `name contains '-meta.json'`\n    )\n    const contentPromises = cloudFiles.map((fileMeta: { id: string }) =>\n      cloudAppFolder.download(fileMeta.id).then((content) => {\n        //@ts-ignore\n        const book: Book = content\n        store.books.push(book)\n      })\n    )\n    store.books = []\n    await Promise.all(contentPromises)\n    store.isBooksLoading = false\n  })\n\n  const uploadBookAction = action(async (book: Book) => {\n    store.isUploading = true\n    const [currentFolder] = await cloudDrive.getOrCreate.folder(\n      `name = '${remoteFolderName}'`,\n      remoteFolderName\n    )\n    const [currentFile] = await cloudDrive.getOrCreate.file(\n      `name = '${book.name}' and '${currentFolder.id}' in parents`,\n      book.name,\n      currentFolder.id\n    )\n    const bookText = await libraryDB.getBookText(book.id)\n    const { id: textFileId } = await cloudDrive.upload(currentFile.id, bookText)\n    const updatedBookMeta = await libraryDB.updateBookMeta(book.id, {\n      textFileId,\n    })\n    const result = await syncMetaAction(updatedBookMeta)\n\n    store.isUploading = false\n    return result\n  })\n\n  const syncMetaAction = action(async (book: Book) => {\n    store.isUploading = true\n    const metaFileName = book.name + '-meta.json'\n    const [currentFile] = await cloudAppFolder.getOrCreate.file(\n      `name = '${metaFileName}'`,\n      metaFileName\n    )\n    const { id: metaFileId } = await cloudAppFolder.upload(\n      currentFile.id,\n      JSON.stringify(book)\n    )\n    const result = await libraryDB.updateBookMeta(book.id, { metaFileId })\n    store.isUploading = false\n    return result\n  })\n\n  const downloadBookAction = action(async (book: Book) => {\n    console.log('wtf', book)\n    if (book.textFileId) {\n      const result = await cloudDrive.download(book.textFileId)\n      console.log('result', result)\n    }\n\n    // const meta: any = await gapi.download(book.id)\n    // let text: any = ''\n    // if (meta.textFileId) text = await gapi.download(meta.textFileId)\n    // return { meta, text }\n  })\n\n  const removeBookAction = action(async (book: Book) => {\n    const promises = []\n    book.textFileId && promises.push(cloudDrive.remove(book.textFileId))\n    book.metaFileId && promises.push(cloudAppFolder.remove(book.metaFileId))\n    const result = await Promise.all(promises)\n    console.log('remove', result)\n    // const isSuccess = await gapi.deleteFile(book.id)\n    // if (isSuccess) {\n    //   store.books = store.books.filter((inner) => inner.id !== book.id)\n    // }\n    // return isSuccess\n  })\n\n  const store = observable({\n    books: [] as Book[],\n    isClientLoaded: false,\n    isLoggedIn: false,\n    isBooksLoading: false,\n    isUploading: false,\n    initLibrary,\n    uploadBookAction,\n    syncMetaAction,\n    downloadBookAction,\n    removeBookAction,\n    fetchBooksListAction,\n  })\n\n  return store\n}\nexport default React.createContext<any>({})\n","import React, { ReactNode } from 'react'\nimport './loading.scss'\nimport styled from 'styled-components'\ninterface ISwitcher {\n  readonly switch: boolean\n}\nconst Switcher = styled.div<ISwitcher>`\n  display: ${(props) => (props.switch ? 'block' : 'none')};\n`\ninterface TLoading {\n  loading: boolean\n  children: ReactNode\n}\nexport default function Loading({ loading, children }: TLoading) {\n  return (\n    <>\n      <Switcher switch={loading}>\n        <div>Loading</div>\n      </Switcher>\n      {children}\n    </>\n  )\n}\n","import React from 'react'\nimport { observer } from 'mobx-react'\nimport { Book } from '../../types'\nimport Paper from '@material-ui/core/Paper'\nimport styled from 'styled-components'\n\nconst Container = styled(Paper)`\n  width: 115px;\n  height: 185px;\n  position: relative;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  word-break: break-all;\n  padding: 5px;\n  margin: 5px;\n`\nconst Image = styled.img`\n  display: block;\n  width: 100%;\n  height: 100%;\n`\ninterface BookItemProps {\n  book: Book\n  onClick?: (book: Book) => void\n  children?: any\n}\nconst BookItem = observer(\n  ({ book, children, onClick, ...rest }: BookItemProps) => {\n    return (\n      <Container elevation={3} onClick={() => onClick && onClick(book)}>\n        {children}\n        {book.cover ? (\n          <>\n            <Image src={book.cover} alt=\"\" />\n          </>\n        ) : (\n          <div>{book.name}</div>\n        )}\n      </Container>\n    )\n  }\n)\n\nexport default BookItem\n","import React, { useState } from 'react'\nimport { observer } from 'mobx-react'\nimport { Book } from '../../types'\nimport BookItem from '../../components/common/BookItem'\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogTitle from '@material-ui/core/DialogTitle'\nimport Dialog from '@material-ui/core/Dialog'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport Typography from '@material-ui/core/Typography'\nimport Box from '@material-ui/core/Box'\nimport styled from 'styled-components'\n\ntype TShelveActionHandler = (book: Book | null) => void\n\nconst Spacer = styled.div`\n  height: 56px;\n  width: 100%;\n`\n\nexport type TSheveAction = {\n  text: string\n  handler: TShelveActionHandler\n}\ninterface TShelve {\n  books: Book[]\n  dialogBookClickHandler?: TShelveActionHandler\n  actions: TSheveAction[]\n}\n\nconst Shelve = observer(\n  ({ books, actions, dialogBookClickHandler }: TShelve) => {\n    const [isBookDialogOpenned, setIsBookDialogOpenned] = useState(false)\n    const [selectedBook, setSelectedBook] = useState<Book | null>(null)\n    const bookClickHandler = (book: Book) => {\n      setIsBookDialogOpenned(true)\n      setSelectedBook(book)\n    }\n    const handleDialogClose = () => {\n      setIsBookDialogOpenned(false)\n      setSelectedBook(null)\n    }\n    const handleBookAction = (action: TSheveAction) => {\n      action.handler(selectedBook)\n      handleDialogClose()\n    }\n\n    return (\n      <>\n        <Box display=\"flex\" justifyContent=\"center\" flexWrap=\"wrap\">\n          {books.map((book: Book, index: number) => (\n              <BookItem key={index} book={book} onClick={bookClickHandler} />\n          ))}\n          <Spacer />\n        </Box>\n        <Dialog\n          onClose={handleDialogClose}\n          open={isBookDialogOpenned}\n          fullWidth={true}\n        >\n          <DialogTitle></DialogTitle>\n          <DialogContent>\n            <Grid container justify=\"center\" spacing={2}>\n              <Grid item>\n                {selectedBook && (\n                  <BookItem\n                    book={selectedBook}\n                    onClick={() =>\n                      dialogBookClickHandler &&\n                      dialogBookClickHandler(selectedBook)\n                    }\n                  />\n                )}\n              </Grid>\n              <Grid item xs={8}>\n                <Typography display=\"block\" noWrap={true}>\n                  {selectedBook?.name}\n                </Typography>\n              </Grid>\n            </Grid>\n          </DialogContent>\n          <DialogActions>\n            {actions.map((action, index) => (\n              <Button\n                key={index}\n                onClick={() => handleBookAction(action)}\n                color=\"primary\"\n              >\n                {action.text}\n              </Button>\n            ))}\n          </DialogActions>\n        </Dialog>\n      </>\n    )\n  }\n)\n\nexport default Shelve\n","import React, { useContext } from 'react'\nimport { observer } from 'mobx-react'\nimport { Book } from '../../types'\nimport RemoteLibraryStoreContext from '../../store/RemoteLibraryStore'\nimport LibraryStoreContext from '../../store/LibraryStore'\nimport { Loading } from '../../components/loading'\nimport Shelve, { TSheveAction } from './Shelve'\n\nconst RemoteBooksList = observer(() => {\n  const {\n    books,\n    isBooksLoading,\n    isLoggedIn,\n    downloadBookAction,\n    removeBookAction,\n  } = useContext(RemoteLibraryStoreContext)\n  const { books: localBooks, updateBookAction, syncBookAction } = useContext(\n    LibraryStoreContext\n  )\n\n  const collectBook = async (book: Book | null) => {\n    const text = await downloadBookAction(book)\n    // await syncBookAction(meta, text)\n    console.log('collect book', book, text)\n  }\n  const actions: TSheveAction[] = [\n    {\n      text: 'remove',\n      handler: removeBookAction,\n    },\n    {\n      text: 'collect',\n      handler: collectBook,\n    },\n  ]\n\n  console.log('cloud books', books)\n  return (\n    <>\n      <div className={`collection ${!isLoggedIn ? 'hidden' : ''}`}>\n        <Loading loading={isBooksLoading}>\n          <Shelve\n            books={books}\n            dialogBookClickHandler={collectBook}\n            actions={actions}\n          />\n        </Loading>\n      </div>\n    </>\n  )\n})\nexport default RemoteBooksList\n","import { observer } from 'mobx-react'\nimport { readFileContent } from '../../uitls/common'\nimport React, { useContext } from 'react'\nimport { makeStyles, useTheme } from '@material-ui/core/styles';\nimport LibraryStoreContext from '../../store/LibraryStore'\nimport Fab from '@material-ui/core/Fab';\nimport AddIcon from '@material-ui/icons/Add';\n\nconst useStyles = makeStyles((theme) => ({\n  container: {\n    position: 'absolute',\n    right: 0,\n    bottom: theme.spacing(8),\n  },\n  fab: {\n    right: theme.spacing(2),\n  },\n  input: {\n    display: 'none'\n  }\n}));\n\nconst AddBookButton = observer(({ ...rest }: any) => {\n  const { addBookAction } = useContext(LibraryStoreContext)\n  const theme = useTheme();\n  const classes = useStyles(theme)\n\n  function onChangeHandler(event: React.ChangeEvent<HTMLInputElement>) {\n    if (event.target.files?.length) {\n      const file = event.target.files[0]\n      readFileContent(file).then((text: string) => {\n        addBookAction(text, file)\n      })\n    }\n  }\n\n  return (\n    <label className={classes.container} {...rest} htmlFor=\"btn-add-book\">\n      <input\n        type=\"file\"\n        name=\"\"\n        id=\"btn-add-book\"\n        onChange={onChangeHandler}\n        accept=\".fb2\"\n        className={classes.input}\n      />\n      <Fab\n        color=\"primary\"\n        component=\"span\"\n        className={classes.fab}>\n        <AddIcon />\n      </Fab>\n\n    </label>\n  )\n})\n\n\nconst BooksListPlaceholder = observer(() => (\n  <div className=\"book-list-placeholder\">\n    <div className=\"centered\">\n      <div>\n        Welcome! You haven't uploaded any books yet. Careful Reader supports\n        <strong>&nbsp;fb2&nbsp;</strong>\n        ones.\n      </div>\n      <AddBookButton className=\"add-btn-placeholder\" />\n    </div>\n  </div>\n))\n\nexport { AddBookButton, BooksListPlaceholder }\n","import React, { useContext } from 'react'\nimport { observer } from 'mobx-react'\nimport { Book } from '../../types'\nimport { useHistory } from 'react-router-dom'\nimport Shelve, { TSheveAction } from './Shelve'\nimport LibraryStoreContext from '../../store/LibraryStore'\nimport RemoteLibraryStore from '../../store/RemoteLibraryStore'\n\nconst LocalBooksList = observer(() => {\n  const history = useHistory()\n  const { books, removeBookAction } = useContext(LibraryStoreContext)\n  const { uploadBookAction, syncMetaAction } = useContext(RemoteLibraryStore)\n  const handleBookRead = (book: Book | null) => {\n    book && history.push(`/read/${book.id}`)\n  }\n\n  const actions: TSheveAction[] = [\n    {\n      text: 'remove',\n      handler: removeBookAction,\n    },\n    {\n      text: 'read',\n      handler: handleBookRead,\n    },\n    {\n      text: 'upload',\n      handler: uploadBookAction,\n    },\n    {\n      text: 'sync',\n      handler: syncMetaAction\n    }\n  ]\n\n  return (\n    <>\n      <Shelve\n        books={books}\n        dialogBookClickHandler={handleBookRead}\n        actions={actions}\n      />\n    </>\n  )\n})\n\nexport default LocalBooksList\n","import React from 'react'\nimport { Header } from '../../components/common'\nimport { observer } from 'mobx-react'\nimport RemoteBooksList from './RemoteShelve'\nimport { AddBookButton } from './common'\nimport LocalBooksList from './LocalShelve'\nimport SwipeableViews from 'react-swipeable-views'\nimport { useTheme } from '@material-ui/core/styles'\nimport BottomNavigation from '@material-ui/core/BottomNavigation'\nimport BottomNavigationAction from '@material-ui/core/BottomNavigationAction'\nimport Zoom from '@material-ui/core/Zoom'\nimport AddIcon from '@material-ui/icons/Add'\nimport styled from 'styled-components'\n\nconst Contaier = styled.div`\n  position: relative;\n`\nconst Content = styled.div`\n  overflow: auto;\n`\nconst FabsContainer = styled.div`\n  position: fixed;\n  right: 0;\n  bottom: 0;\n`\nconst BottomMenu = styled.div`\n  position: fixed;\n  bottom: 0;\n  right: 0;\n  left: 0;\n`\nconst BottomMenuHeight = styled.div``\n\nexport default observer(function Shelves() {\n  const theme = useTheme()\n  const [value, setValue] = React.useState(0)\n  const transitionDuration = {\n    enter: theme.transitions.duration.enteringScreen,\n    exit: theme.transitions.duration.leavingScreen,\n  }\n  const handleChangeIndex = (index: number) => setValue(index)\n  const handleChange = (event: any, index: number) => handleChangeIndex(index)\n\n  const fabs = [\n    {\n      color: 'primary',\n      icon: <AddIcon />,\n      label: 'Add',\n      clickHandler: () => {\n        console.log('hey you')\n      },\n    },\n  ]\n\n  return (\n    <Contaier>\n      <Header></Header>\n      <Content>\n        <SwipeableViews index={value} onChangeIndex={handleChangeIndex}>\n          <LocalBooksList />\n          <RemoteBooksList />\n          <div>favorite</div>\n        </SwipeableViews>\n      </Content>\n      <FabsContainer>\n        {fabs.map((fab, index) => (\n          <Zoom\n            key={fab.color}\n            in={value === index}\n            timeout={transitionDuration}\n            style={{\n              transitionDelay: `${\n                value === index ? transitionDuration.exit : 0\n              }ms`,\n            }}\n            unmountOnExit\n          >\n            <AddBookButton />\n          </Zoom>\n        ))}\n      </FabsContainer>\n      <BottomMenu>\n        <BottomMenuHeight />\n\n        <BottomNavigation value={value} onChange={handleChange} showLabels>\n          <BottomNavigationAction label=\"local\" />\n          <BottomNavigationAction label=\"remote\" />\n          <BottomNavigationAction label=\"fav\" />\n        </BottomNavigation>\n      </BottomMenu>\n    </Contaier>\n  )\n})\n","import Shelves from './Shelves'\n\nexport default Shelves\n","const MAX_WORD_CLASSES = 100\n\nexport function hightLightElementsOnScreen(\n  screenElement: any,\n  allElements: any\n): any[] {\n  const onScreen: any[] = []\n  if (!screenElement) return onScreen\n  const viewportTop = screenElement.scrollTop\n  const viewportHeight = screenElement.clientHeight\n  const viewportBottom = viewportTop + viewportHeight\n  for (let i = 0; i < allElements.length; i++) {\n    const el = allElements[i]\n    if (isOnScreen(el, screenElement)) {\n      stylize(el)\n      onScreen.push(el)\n    }\n    if (el.offsetTop > viewportBottom) {\n      break\n    }\n  }\n  return onScreen\n}\n\nexport function getStyledElement(text: string) {\n  // const separator = /(?:,| |&nbsp;|\\.)+/\n  const indexes = shuffle([...Array(MAX_WORD_CLASSES).keys()])\n  const separator = ' '\n  let index = 0\n  const children = text\n    .split(separator)\n    .map((word: string) => {\n      index = index >= MAX_WORD_CLASSES ? 0 : index + 1\n      return `<span class=\"w${indexes[index]}\">${word}</span>`\n    })\n    .join(separator)\n  const wrapper = document.createElement('hlw')\n  wrapper.innerHTML = children\n  return wrapper\n}\n\nfunction shuffle<T>(array: Array<T>) {\n  return array.sort(() => Math.random() - 0.5)\n}\n\nfunction textNodesUnder(el: HTMLElement) {\n  let n\n  const result = []\n  let walk = document.createTreeWalker(el, NodeFilter.SHOW_TEXT, null, false)\n  while ((n = walk.nextNode())) result.push(n)\n  return result\n}\n\nexport function stylize(element: HTMLElement) {\n  if (element.className.includes('hg')) return\n\n  textNodesUnder(element).forEach((textElement: any) => {\n    if (textElement) {\n      const styledTextElement = getStyledElement(textElement.textContent)\n      textElement.replaceWith(styledTextElement)\n      element.className += ' hg'\n    }\n  })\n}\n\nfunction isOnScreen(el: any, screenContainerElement: any) {\n  const viewportTop = screenContainerElement.scrollTop\n  const viewportHeight = screenContainerElement.clientHeight\n  const viewportBottom = viewportTop + viewportHeight\n  const top = el.offsetTop\n  const height = el.clientHeight\n  const bottom = top + height\n\n  return (\n    (top >= viewportTop && top < viewportBottom) ||\n    (bottom > viewportTop && bottom <= viewportBottom) ||\n    (height > viewportHeight && top <= viewportTop && bottom >= viewportBottom)\n  )\n}\n","import React, { useEffect, useState, useRef, useContext } from 'react'\nimport './Reader.scss'\nimport { useParams } from 'react-router-dom'\nimport { debounce } from '../../uitls/common'\nimport { hightLightElementsOnScreen } from '../../uitls/styler'\nimport { Header } from '../../components/common'\nimport LibraryStoreContext from '../../store/LibraryStore'\nimport AppContext from '../../store/AppStore'\nimport { observer } from 'mobx-react'\nimport useEventListener from '@use-it/event-listener'\nimport { Loading } from '../../components/loading'\nimport { useDebounce } from 'use-debounce'\nimport styled from 'styled-components'\n\nconst PageCount = styled.span`\n  white-space: nowrap;\n  padding: 6px 8px;\n`\ninterface QueryParams {\n  bookId: string\n}\n\nconst dfunc = debounce((fn) => fn && fn(), 100)\n\nexport default observer(function Reader() {\n  const { wordsHighlight, dynamicTextOrientation } = useContext(AppContext)\n  const { updateBookPositionAction, openBookAction, currentBook } = useContext(\n    LibraryStoreContext\n  )\n  const [numberOfcurrentPage, setNumberOfCurrentPage] = useState(0)\n  const [currenPositionPercent, setCurrenPositionPercent] = useState('0.0')\n  const [pagesCount, setPagesCount] = useState(0)\n  const [showControls, setShowControls] = useState(false)\n  const textContainerRef = useRef<HTMLDivElement | null>(null)\n  const elementsForHightlightRef = useRef([])\n  const [loading, setLoading] = useState(false)\n  const queryParams = useParams<QueryParams>()\n  const bookId = parseInt(queryParams.bookId)\n  const [motionStyle, setMotionStyle] = useState({})\n\n  useEffect(() => {\n    const { current } = textContainerRef\n    const openBook = async () => {\n      setLoading(true)\n      await openBookAction(bookId)\n      current!.innerHTML = currentBook.text\n      elementsForHightlightRef.current = getElementsForHightlight()\n      setPagesCount(getPagesCount())\n      const positions: any[] = []\n\n      current\n        ?.querySelectorAll('p')\n        .forEach((o: HTMLElement) => positions.push(o.getAttribute('data-id')))\n      restoreScrollPoition(currentBook.info.positionElement)\n      setLoading(false)\n    }\n\n    openBook()\n    current!.addEventListener('scroll', handleScroll)\n    return () => {\n      return current!.removeEventListener('scroll', handleScroll)\n    }\n  }, [])\n\n  const [dtoStyle] = useDebounce(motionStyle, 5)\n  const deviceOrientationHandler = ({ gamma }: DeviceOrientationEvent) => {\n    if (!dynamicTextOrientation) {\n      setMotionStyle({ transform: '' })\n      return\n    }\n    if (gamma) {\n      const style = {\n        transform: `rotateZ(${-gamma}deg)`,\n      }\n      setMotionStyle(style)\n    }\n  }\n  const bookTitle = () =>\n    currentBook?.info?.meta?.title || currentBook?.info?.name\n  useEventListener('deviceorientation', deviceOrientationHandler)\n  return (\n    <div className=\"reader\">\n      <Header\n        className={`${showControls ? '' : ' hidden'} `}\n        title={bookTitle()}\n      >\n        <div className=\"\">{currenPositionPercent}%</div>\n        <PageCount>{`${numberOfcurrentPage}/${pagesCount}`}</PageCount>\n      </Header>\n      <Loading loading={loading}>\n        <div className={`list-view ${wordsHighlight ? 'highlight' : ''}`}>\n          <div\n            className=\"text-container\"\n            onClick={toggleMenuHandler}\n            style={dtoStyle}\n            ref={textContainerRef}\n          ></div>\n        </div>\n      </Loading>\n    </div>\n  )\n\n  function getElementsForHightlight() {\n    const result: any = []\n    document.querySelectorAll('p').forEach((el: any) => {\n      result.push(el)\n    })\n    return result.sort((a: any, b: any) => a.offsetTop > b.offsetTop)\n  }\n\n  function handleScroll(e: Event) {\n    const { current } = textContainerRef\n    const { current: elementsForHightlight } = elementsForHightlightRef\n    if (current) {\n      const percent = getPercentOfScroll()\n      setCurrenPositionPercent(percent.toFixed(2))\n      setNumberOfCurrentPage(getNumberOfCurrentPage())\n      dfunc(() => {\n        const onScreen =\n          hightLightElementsOnScreen(current, elementsForHightlight) || []\n        updateBookPosition(onScreen[0])\n      })\n    }\n  }\n\n  function getPercentOfScroll() {\n    const { current } = textContainerRef\n    return current ? (current.scrollTop * 100) / current.scrollHeight : 0.0\n  }\n\n  function updateBookPosition(posElement: HTMLElement) {\n    if (posElement) {\n      const positionElementId = posElement.getAttribute('data-id')\n      updateBookPositionAction(bookId, positionElementId)\n    }\n  }\n\n  function restoreScrollPoition(positionId: string) {\n    if (positionId) {\n      const toElement = document.querySelector(`[data-id=\"${positionId}\"]`)\n      toElement?.scrollIntoView()\n    }\n  }\n\n  function getPagesCount() {\n    const { current } = textContainerRef\n    return Math.round(current!.scrollHeight / current!.clientHeight)\n  }\n\n  function getNumberOfCurrentPage() {\n    const { current } = textContainerRef\n    return Math.round(current!.scrollTop / current!.clientHeight)\n  }\n\n  function toggleMenuHandler() {\n    setShowControls(!showControls)\n  }\n})\n","import Reader from './Reader'\n\nexport default Reader\n","export default __webpack_public_path__ + \"static/media/page1.7720a4ef.jpg\";","export default __webpack_public_path__ + \"static/media/page2.c690ddc0.jpg\";","export default __webpack_public_path__ + \"static/media/page3.ce566b3c.jpg\";","import { observer } from 'mobx-react'\nimport React, { useContext } from 'react'\nimport { useIntl } from 'react-intl'\nimport { Header } from '../../components/common'\nimport AppContext from '../../store/AppStore'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport FormLabel from '@material-ui/core/FormLabel'\nimport Grid from '@material-ui/core/Grid'\nimport Switch from '@material-ui/core/Switch'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport TextField from '@material-ui/core/TextField'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport Select from '@material-ui/core/Select'\nimport styled from 'styled-components'\nimport PageCoverImage1 from '../../static/page1.jpg'\nimport PageCoverImage2 from '../../static/page2.jpg'\nimport PageCoverImage3 from '../../static/page3.jpg'\n\nconst FormControlStyled = styled(FormControl)`\n  margin: 10px;\n  min-width: 200px;\n`\nconst CoverImage = styled.img`\n  height: 56px;\n`\n\nexport default observer(function Settings() {\n  const {\n    locale,\n    imageCover,\n    wordsHighlight,\n    isUseImageCover,\n    pageBackgroundColor,\n    dynamicTextOrientation,\n  } = useContext(AppContext)\n  const appContext = useContext(AppContext)\n  const intl = useIntl()\n  const handleInputChange = (\n    event: React.ChangeEvent<any>\n  ) => {\n    const handlerName = event.target.name\n    const handlerParams = event.target.type === 'checkbox' ? event.target.checked : event.target.value\n    const handler = appContext[handlerName]\n    if (typeof handler === 'function') {\n      handler(handlerParams)\n    }\n  }\n\n  const getUseImageCoverTitle = () =>\n    isUseImageCover ? 'изображение' : 'сплошной текст'\n\n  return (\n    <>\n      <Header></Header>\n      <Grid container>\n        <Grid item xs={12}>\n          <FormControlStyled>\n            <InputLabel id=\"language-select-label\">\n              {intl.formatMessage({ id: 'settings.language' })}\n            </InputLabel>\n            <Select\n              labelId=\"language-select-label\"\n              value={locale}\n              name=\"setLocale\"\n              onChange={handleInputChange}\n            >\n              <MenuItem value={'ru'}>Русский</MenuItem>\n              <MenuItem value={'en'}>English</MenuItem>\n            </Select>\n          </FormControlStyled>\n        </Grid>\n        <Grid item xs={12}>\n          <FormControlStyled>\n            <FormLabel component=\"legend\">\n              Подсветка слов в тексте для упрощения поиска строк глазами\n            </FormLabel>\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={wordsHighlight}\n                  onChange={handleInputChange}\n                  name=\"toggleHightligting\"\n                />\n              }\n              label=\"Подсветка слов\"\n            />\n          </FormControlStyled>\n        </Grid>\n        <Grid item xs={12}>\n          <FormControlStyled>\n            <FormLabel component=\"legend\">\n              Подстраивать положение текста в зависимости от ориентации\n              устройства\n            </FormLabel>\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={dynamicTextOrientation}\n                  onChange={handleInputChange}\n                  name=\"toggleDynamicTextOrientation\"\n                />\n              }\n              label=\"Динамическая ориентация текста\"\n            />\n          </FormControlStyled>\n        </Grid>\n        <Grid item xs={12}>\n          <FormControlStyled>\n            <FormLabel component=\"legend\">Подложка книги</FormLabel>\n            <FormControlLabel\n              control={\n                <Switch\n                  checked={isUseImageCover}\n                  onChange={handleInputChange}\n                  name=\"toggleUseImageCover\"\n                />\n              }\n              label={getUseImageCoverTitle()}\n            />\n          </FormControlStyled>\n          {isUseImageCover && <FormControlStyled>\n            <InputLabel id=\"cover-image-select-label\">\n              {intl.formatMessage({ id: 'settings.coverImage' })}\n            </InputLabel>\n            <Select\n              labelId=\"cover-image-select-label\"\n              value={imageCover}\n              name=\"setImageCoverAction\"\n              onChange={handleInputChange}\n            >\n              <MenuItem value={'1'}>\n                <CoverImage src={PageCoverImage1} />\n              </MenuItem>\n              <MenuItem value={'2'}>\n                <CoverImage src={PageCoverImage2} />\n              </MenuItem>\n              <MenuItem value={'3'}>\n                <CoverImage src={PageCoverImage3} />\n              </MenuItem>\n            </Select>\n          </FormControlStyled>}\n          {!isUseImageCover && <FormControlStyled>\n            <TextField\n              id=\"cover-bg-color-input-label\"\n              label={intl.formatMessage({ id: 'settings.coverBgColor' })}\n              type=\"text\"\n              value={pageBackgroundColor}\n              name=\"setPageBackgroundColorAction\"\n              onChange={handleInputChange}\n              margin=\"normal\"\n            />\n          </FormControlStyled>\n          }\n        </Grid>\n      </Grid>\n    </>\n  )\n})\n","import React, { useEffect } from 'react'\nimport './App.scss'\nimport Shelves from './pages/shelves'\nimport Reader from './pages/reader'\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\nimport { observer, useLocalStore } from 'mobx-react'\nimport LibraryStoreContext, { LibraryStore } from './store/LibraryStore'\nimport RemoteLibraryStoreContext, {\n  RemoteLibraryStore,\n} from './store/RemoteLibraryStore'\nimport { IntlProvider } from 'react-intl'\nimport AppStoreContext, { AppStore } from './store/AppStore'\nimport { Settings } from './pages/settings'\n\nconst App = observer(function App() {\n  const libraryStore = useLocalStore(LibraryStore)\n  const remoteStore = useLocalStore(RemoteLibraryStore)\n  const appStore = useLocalStore(AppStore)\n  const basename =\n    process.env.NODE_ENV === 'development' ? '/' : process.env.PUBLIC_URL\n  const { isLoggedIn } = remoteStore\n  const messages = appStore.getLocaleMessages()\n\n  useEffect(() => {\n    libraryStore.fetchBooksListAction()\n  }, [])\n\n  const fetchBooks = async () => {\n    if (isLoggedIn) await remoteStore.fetchBooksListAction()\n  }\n  useEffect(() => {\n    fetchBooks()\n  }, [isLoggedIn])\n\n  return (\n    <AppStoreContext.Provider value={appStore}>\n      <LibraryStoreContext.Provider value={libraryStore}>\n        <RemoteLibraryStoreContext.Provider value={remoteStore}>\n          <IntlProvider\n            locale={appStore.locale}\n            defaultLocale={appStore.defaultLocale}\n            messages={messages}\n          >\n            <Router basename={basename}>\n              <Switch>\n                {/* <Route exact path=\"/\">\n                  <Feed />\n                </Route> */}\n                <Route exact path=\"/\">\n                  <Shelves />\n                </Route>\n                <Route exact path=\"/read/:bookId\">\n                  <Reader />\n                </Route>\n                <Route exact path=\"/settings\">\n                  <Settings />\n                </Route>\n              </Switch>\n            </Router>\n          </IntlProvider>\n        </RemoteLibraryStoreContext.Provider>\n      </LibraryStoreContext.Provider>\n    </AppStoreContext.Provider>\n  )\n})\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport 'normalize.css'\n\nconst app = <App />\n\nReactDOM.render(app, document.getElementById('root'))\nserviceWorker.register()\n"],"sourceRoot":""}