{"version":3,"sources":["components/bookshelf/Bookshelf.tsx","uitls/common.ts","uitls/styler.ts","components/controls/Checkbox.tsx","uitls/database.ts","components/reader/Reader.tsx","uitls/converter.ts","store/BooksReducer.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Bookshelf","books","dispatch","useContext","DispatchContext","className","htmlFor","src","alt","type","name","id","onChange","event","target","files","length","file","reader","FileReader","Promise","resolve","reject","onload","result","onerror","error","readAsText","readFileContent","then","text","payload","accept","map","book","key","to","getStyledElement","indexes","Array","keys","sort","Math","random","index","children","split","word","join","wrapper","document","createElement","innerHTML","stylize","element","el","n","a","walk","createTreeWalker","NodeFilter","SHOW_TEXT","nextNode","push","textNodesUnder","forEach","textElement","includes","styledTextElement","textContent","replaceWith","isOnScreen","screenContainerElement","viewportTop","scrollTop","viewportHeight","clientHeight","viewportBottom","top","offsetTop","height","bottom","Checkbox","label","value","checked","DB_NAME","openDB","upgrade","db","createObjectStore","keyPath","autoIncrement","storeBook","fileMeta","tx","transaction","objectStore","add","primaryKey","record","positionElement","done","bookId","get","oldBook","newBook","put","getAll","dfunc","func","waitFor","timeout","args","clearTimeout","setTimeout","debounce","fn","Reader","state","StateContext","useState","numberOfcurrentPage","setNumberOfCurrentPage","currenPositionPercent","setCurrenPositionPercent","pagesCount","setPagesCount","wordsHighlight","setWordsHighlight","textContainerRef","useRef","elementsForHightlightRef","queryParams","useParams","parseInt","handleScroll","e","current","elementsForHightlight","percent","scrollHeight","getPercentOfScroll","toFixed","round","getNumberOfCurrentPage","posElement","getAttribute","updateBookPosition","screenElement","allElements","onScreen","i","hightLightElementsOnScreen","handlePageChange","direction","sign","useEffect","getBookText","getPagesCount","currentBook","find","toElement","querySelector","scrollIntoView","restoreScrollPoition","querySelectorAll","b","getElementsForHightlight","addEventListener","removeEventListener","ref","onClick","convertFB2ToHtml","bookText","parser","DOMParser","parseFromString","fetch","res","str","window","xsl","xsltProcessor","XSLTProcessor","importStylesheet","transformToDocument","initialBooksState","useBooksReducer","memoizedReducer","useCallback","action","getBookList","addBookToDB","updateBook","appReducer","React","useReducer","html","body","createContext","App","Provider","path","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","initDB","app","ReactDOM","render","getElementById","URL","process","href","origin","response","contentType","headers","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4024109a.chunk.js","sourcesContent":["import React, { useContext } from 'react'\r\nimport { BookList, Book } from '../../types'\r\nimport { Link } from 'react-router-dom'\r\nimport { readFileContent } from '../../uitls/common'\r\nimport './Bookshelf.scss'\r\nimport { DispatchContext } from '../../App'\r\ninterface IBookshelfProps {\r\n  books?: BookList\r\n}\r\n\r\nexport default function Bookshelf({ books = [] }: IBookshelfProps) {\r\n  const dispatch = useContext(DispatchContext)\r\n\r\n  return (\r\n    <div className=\"book-shelf\">\r\n      <label className=\"add-book-lable\" htmlFor=\"btn-add-book\">\r\n        <img src=\"add-book.png\" alt=\"\" />\r\n        <div className=\"add-book-text\">add book</div>\r\n        <input\r\n          type=\"file\"\r\n          name=\"\"\r\n          id=\"btn-add-book\"\r\n          onChange={onChangeHandler}\r\n          accept=\".fb2\"\r\n        />\r\n      </label>\r\n\r\n      <ul className=\"collection\">\r\n        {books.map((book: Book) => (\r\n          <li className=\"list-item\" key={book.id}>\r\n            <Link to={`/read/${book.id}`}>{book.name}</Link>\r\n          </li>\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  )\r\n\r\n  function onChangeHandler(event: React.ChangeEvent<HTMLInputElement>) {\r\n    if (event.target.files?.length) {\r\n      const file = event.target.files[0]\r\n      readFileContent(file).then((text: string) => {\r\n        const payload = {\r\n          text,\r\n          file,\r\n        }\r\n        dispatch({ type: 'add_book', payload })\r\n      })\r\n    }\r\n  }\r\n}\r\n","import { BookList } from '../types'\r\n\r\nexport async function getBooksList(): Promise<BookList> {\r\n  return fetch('db.json').then((resp) => resp.json())\r\n}\r\n\r\nexport async function getBook(filePath: string): Promise<string> {\r\n  return fetch(filePath).then((resp) => resp.text())\r\n}\r\n\r\nexport function readFileContent(file: File): Promise<string> {\r\n  const reader = new FileReader()\r\n\r\n  return new Promise((resolve, reject) => {\r\n    reader.onload = (event) => {\r\n      return resolve(event?.target?.result + '')\r\n    }\r\n    reader.onerror = (error) => reject('error reading file')\r\n    reader.readAsText(file)\r\n  })\r\n}\r\n\r\nexport const debounce = <F extends (...args: any[]) => any>(\r\n  func: F,\r\n  waitFor: number\r\n) => {\r\n  let timeout: ReturnType<typeof setTimeout> | null = null\r\n\r\n  const debounced = (...args: Parameters<F>) => {\r\n    if (timeout !== null) {\r\n      clearTimeout(timeout)\r\n      timeout = null\r\n    }\r\n    timeout = setTimeout(() => func(...args), waitFor)\r\n  }\r\n\r\n  return debounced as (...args: Parameters<F>) => ReturnType<F>\r\n}\r\n","const MAX_WORD_CLASSES = 100\r\n\r\nexport function hightLightElementsOnScreen(\r\n  screenElement: any,\r\n  allElements: any\r\n): any[] {\r\n  const onScreen: any[] = []\r\n  if (!screenElement) return onScreen\r\n  const viewportTop = screenElement.scrollTop\r\n  const viewportHeight = screenElement.clientHeight\r\n  const viewportBottom = viewportTop + viewportHeight\r\n  for (let i = 0; i < allElements.length; i++) {\r\n    const el = allElements[i]\r\n    if (isOnScreen(el, screenElement)) {\r\n      stylize(el)\r\n      onScreen.push(el)\r\n    }\r\n    if (el.offsetTop > viewportBottom) {\r\n      break\r\n    }\r\n  }\r\n  return onScreen\r\n}\r\n\r\nexport function getStyledElement(text: string) {\r\n  // const separator = /(?:,| |&nbsp;|\\.)+/\r\n  const indexes = shuffle([...Array(MAX_WORD_CLASSES).keys()])\r\n  const separator = ' '\r\n  let index = 0\r\n  const children = text\r\n    .split(separator)\r\n    .map((word: string) => {\r\n      index = index >= MAX_WORD_CLASSES ? 0 : index + 1\r\n      return `<span class=\"w${indexes[index]}\">${word}</span>`\r\n    })\r\n    .join(separator)\r\n  const wrapper = document.createElement('hlw')\r\n  wrapper.innerHTML = children\r\n  return wrapper\r\n}\r\n\r\nfunction shuffle<T>(array: Array<T>) {\r\n  return array.sort(() => Math.random() - 0.5)\r\n}\r\nfunction textNodesUnder(el: HTMLElement) {\r\n  var n,\r\n    a = [],\r\n    walk = document.createTreeWalker(el, NodeFilter.SHOW_TEXT, null, false)\r\n  while ((n = walk.nextNode())) a.push(n)\r\n  return a\r\n}\r\n\r\nexport function stylize(element: HTMLElement) {\r\n  textNodesUnder(element).forEach((textElement: any) => {\r\n    if (textElement && !element.className.includes('hg')) {\r\n      const styledTextElement = getStyledElement(textElement.textContent)\r\n      textElement.replaceWith(styledTextElement)\r\n      element.className += ' hg'\r\n    }\r\n  })\r\n}\r\n\r\nfunction isOnScreen(el: any, screenContainerElement: any) {\r\n  const viewportTop = screenContainerElement.scrollTop\r\n  const viewportHeight = screenContainerElement.clientHeight\r\n  const viewportBottom = viewportTop + viewportHeight\r\n  const top = el.offsetTop\r\n  const height = el.clientHeight\r\n  const bottom = top + height\r\n\r\n  return (\r\n    (top >= viewportTop && top < viewportBottom) ||\r\n    (bottom > viewportTop && bottom <= viewportBottom) ||\r\n    (height > viewportHeight && top <= viewportTop && bottom >= viewportBottom)\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\ninterface CheckboxProps {\r\n  label?: string\r\n  name?: string\r\n  value?: boolean\r\n  onChange?: (event: React.ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport function Checkbox({ label, name, value, onChange }: CheckboxProps) {\r\n  return (\r\n    <label>\r\n      <span>{label}</span>\r\n      <input\r\n        type=\"checkbox\"\r\n        name={name}\r\n        checked={value}\r\n        value=\"1\"\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  )\r\n}\r\n","import { openDB, DBSchema } from 'idb'\r\n\r\ninterface ILibrarySchema extends DBSchema {\r\n  index: {\r\n    key: string\r\n    value: {}\r\n  }\r\n}\r\n\r\nconst DB_VERSION = 1\r\nconst DB_NAME = 'library'\r\nconst DB_INDEX_NAME = 'index'\r\nconst DB_STORE_NAME = 'books'\r\n\r\nasync function initDB() {\r\n  return openDB(DB_NAME, DB_VERSION, {\r\n    upgrade(db) {\r\n      db.createObjectStore(DB_INDEX_NAME, { keyPath: 'id' })\r\n      db.createObjectStore(DB_STORE_NAME, { autoIncrement: true })\r\n    },\r\n  })\r\n}\r\n\r\nasync function storeBook(text: string, fileMeta: File) {\r\n  const db = await openDB(DB_NAME, DB_VERSION)\r\n  const tx = db.transaction([DB_INDEX_NAME, DB_STORE_NAME], 'readwrite')\r\n  const primaryKey = await tx.objectStore(DB_STORE_NAME).add(text)\r\n  const record = {\r\n    id: primaryKey,\r\n    name: fileMeta.name,\r\n    positionElement: null,\r\n  }\r\n\r\n  tx.objectStore(DB_INDEX_NAME).add(record)\r\n  await tx.done\r\n  return record\r\n}\r\n\r\nasync function updateBook(bookId: number, book: any) {\r\n  const db = await openDB(DB_NAME, DB_VERSION)\r\n  const objectStore = db\r\n    .transaction([DB_INDEX_NAME], 'readwrite')\r\n    .objectStore(DB_INDEX_NAME)\r\n  return objectStore.get(bookId).then((oldBook) => {\r\n    const newBook = {\r\n      ...oldBook,\r\n      ...book,\r\n    }\r\n    return objectStore.put(newBook).then(() => newBook)\r\n  })\r\n}\r\n\r\nasync function getBookList() {\r\n  const db = await openDB(DB_NAME, DB_VERSION)\r\n  return db.getAll(DB_INDEX_NAME)\r\n}\r\n\r\nasync function getBookText(id: number) {\r\n  const db = await openDB(DB_NAME, DB_VERSION)\r\n  return db.get(DB_STORE_NAME, id)\r\n}\r\n\r\nexport { initDB, storeBook, getBookList, getBookText, updateBook }\r\n","import React, { useEffect, useState, useRef, useContext } from 'react'\r\nimport './Reader.scss'\r\nimport { useParams, Link } from 'react-router-dom'\r\nimport { debounce } from '../../uitls/common'\r\nimport { hightLightElementsOnScreen } from '../../uitls/styler'\r\nimport { Checkbox } from '../controls/Checkbox'\r\nimport { DispatchContext, StateContext } from '../../App'\r\nimport { getBookText } from '../../uitls/database'\r\nimport { Book } from '../../types'\r\n\r\ninterface QueryParams {\r\n  bookId: string\r\n}\r\n\r\nconst dfunc = debounce((fn) => fn && fn(), 100)\r\n\r\nexport default function Reader() {\r\n  const dispatch = useContext(DispatchContext)\r\n  const state = useContext(StateContext)\r\n  const [numberOfcurrentPage, setNumberOfCurrentPage] = useState(0)\r\n  const [currenPositionPercent, setCurrenPositionPercent] = useState('0.0')\r\n  const [pagesCount, setPagesCount] = useState(0)\r\n  const [wordsHighlight, setWordsHighlight] = useState(true)\r\n  const textContainerRef = useRef<HTMLDivElement | null>(null)\r\n  const elementsForHightlightRef = useRef([])\r\n\r\n  const queryParams = useParams<QueryParams>()\r\n  const bookId = parseInt(queryParams.bookId)\r\n\r\n  function getElementsForHightlight() {\r\n    const result: any = []\r\n    document.querySelectorAll('p').forEach((el: any) => {\r\n      result.push(el)\r\n    })\r\n    return result.sort((a: any, b: any) => a.offsetTop > b.offsetTop)\r\n  }\r\n\r\n  function handleScroll(e: Event) {\r\n    const { current } = textContainerRef\r\n    const { current: elementsForHightlight } = elementsForHightlightRef\r\n    if (current) {\r\n      const percent = getPercentOfScroll()\r\n      setCurrenPositionPercent(percent.toFixed(2))\r\n      setNumberOfCurrentPage(getNumberOfCurrentPage())\r\n      dfunc(() => {\r\n        const onScreen =\r\n          hightLightElementsOnScreen(current, elementsForHightlight) || []\r\n        updateBookPosition(onScreen[0])\r\n      })\r\n    }\r\n  }\r\n\r\n  function restoreScrollPoition() {\r\n    const currentBook: Book | undefined = state.find(\r\n      (book: Book) => book.id === bookId\r\n    )\r\n    if (currentBook) {\r\n      const toElement = document.querySelector(\r\n        `[data-id=\"${currentBook.positionElement}\"]`\r\n      )\r\n      toElement?.scrollIntoView()\r\n    }\r\n  }\r\n\r\n  function getPercentOfScroll() {\r\n    const { current } = textContainerRef\r\n    return current ? (current.scrollTop * 100) / current.scrollHeight : 0.0\r\n  }\r\n\r\n  function updateBookPosition(posElement: HTMLElement) {\r\n    if (posElement) {\r\n      const positionElement = posElement.getAttribute('data-id')\r\n      const payload = { bookId, positionElement }\r\n      dispatch({ type: 'update_book_position', payload })\r\n    }\r\n  }\r\n\r\n  function getPagesCount() {\r\n    const { current } = textContainerRef\r\n    return Math.round(current!.scrollHeight / current!.clientHeight)\r\n  }\r\n\r\n  function getNumberOfCurrentPage() {\r\n    const { current } = textContainerRef\r\n    return Math.round(current!.scrollTop / current!.clientHeight)\r\n  }\r\n\r\n  const handlePageChange = (direction: string) => () => {\r\n    const { current } = textContainerRef\r\n    if (current) {\r\n      const sign = direction === 'next' ? 1 : -1\r\n      current.scrollTop += sign * current.clientHeight\r\n    }\r\n  }\r\n\r\n  /*eslint-disable */\r\n  useEffect(() => {\r\n    const { current } = textContainerRef\r\n    getBookText(bookId).then((text) => {\r\n      current!.innerHTML = text\r\n      setPagesCount(getPagesCount())\r\n      restoreScrollPoition()\r\n      elementsForHightlightRef.current = getElementsForHightlight()\r\n      current!.addEventListener('scroll', handleScroll)\r\n    })\r\n\r\n    return () => {\r\n      return current!.removeEventListener('scroll', handleScroll)\r\n    }\r\n  }, [])\r\n  /*eslint-enable */\r\n\r\n  return (\r\n    <div className={`reader list-view ${wordsHighlight ? 'highlight' : ''}`}>\r\n      <div className=\"text-info\">\r\n        <Link className=\"home\" to=\"/\"></Link>\r\n        <div>\r\n          <Checkbox\r\n            label=\"highlight\"\r\n            value={wordsHighlight}\r\n            onChange={() => setWordsHighlight(!wordsHighlight)}\r\n          />\r\n        </div>\r\n        <div className=\"\">{currenPositionPercent}%</div>\r\n        <div className=\"pages\">\r\n          {numberOfcurrentPage} / {pagesCount}\r\n        </div>\r\n      </div>\r\n      <div className=\"text-container\" ref={textContainerRef}></div>\r\n      <div className=\"prev-page\" onClick={handlePageChange('prev')}></div>\r\n      <div className=\"next-page\" onClick={handlePageChange('next')}></div>\r\n    </div>\r\n  )\r\n}\r\n","export async function convertFB2ToHtml(bookText: string) {\r\n  const parser = new DOMParser()\r\n  const el = parser.parseFromString(bookText, 'text/xml')\r\n  return fetch('reader.xsl')\r\n    .then((res) => res.text())\r\n    .then((str) => new window.DOMParser().parseFromString(str, 'text/xml'))\r\n    .then((xsl: any) => {\r\n      const xsltProcessor = new XSLTProcessor()\r\n      xsltProcessor.importStylesheet(xsl)\r\n      return xsltProcessor.transformToDocument(el)\r\n    })\r\n}\r\n","import React, { useCallback } from 'react'\r\nimport { getBookList, storeBook, updateBook } from '../uitls/database'\r\nimport { convertFB2ToHtml } from '../uitls/converter'\r\nimport { Book } from '../types'\r\n\r\nconst initialBooksState: Book[] = []\r\nexport type AppState = typeof initialBooksState\r\n\r\nexport default function useBooksReducer() {\r\n  const memoizedReducer = useCallback(\r\n    (state, action) => appReducer(state, action),\r\n    []\r\n  )\r\n  const [state, dispatch] = React.useReducer(memoizedReducer, initialBooksState)\r\n  function appReducer(state: AppState, action: any) {\r\n    switch (action.type) {\r\n      case 'set_books_list': {\r\n        return action.payload\r\n      }\r\n\r\n      case 'add_book_to_list': {\r\n        return [...state, action.payload]\r\n      }\r\n\r\n      case 'fetch_books_list': {\r\n        getBookList().then((payload) =>\r\n          dispatch({ type: 'set_books_list', payload })\r\n        )\r\n        return state\r\n      }\r\n\r\n      case 'add_book': {\r\n        const { text, file } = action.payload\r\n        addBookToDB(text, file).then((payload) =>\r\n          dispatch({ type: 'add_book_to_list', payload })\r\n        )\r\n        return state\r\n      }\r\n\r\n      case 'update_book_position': {\r\n        const { bookId, positionElement } = action.payload\r\n        updateBook(bookId, { positionElement })\r\n        return state.map((book) => {\r\n          if (book.id === bookId) {\r\n            return { ...book, ...{ positionElement } }\r\n          }\r\n          return book\r\n        })\r\n      }\r\n    }\r\n    return state\r\n  }\r\n\r\n  return [state, dispatch]\r\n}\r\n\r\nasync function addBookToDB(text: string, file: File) {\r\n  const html = await convertFB2ToHtml(text)\r\n  return await storeBook(html.body.innerHTML, file)\r\n}\r\n","import React, { useEffect } from 'react'\r\nimport './App.scss'\r\nimport Bookshelf from './components/bookshelf/Bookshelf'\r\nimport Reader from './components/reader/Reader'\r\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom'\r\nimport useBooksReducer, { AppState } from './store/BooksReducer'\r\n\r\nexport const StateContext = React.createContext<AppState>([])\r\nexport const DispatchContext = React.createContext<React.Dispatch<any>>(\r\n  (value: any) => {}\r\n)\r\n\r\nfunction App() {\r\n  const [state, dispatch] = useBooksReducer()\r\n  useEffect(() => {\r\n    dispatch({ type: 'fetch_books_list' })\r\n  }, [dispatch])\r\n\r\n  return (\r\n    <StateContext.Provider value={state}>\r\n      <DispatchContext.Provider value={dispatch}>\r\n        <Router>\r\n          <Switch>\r\n            <Route path=\"/read/:bookId\">\r\n              <Reader />\r\n            </Route>\r\n            <Route path=\"/\">\r\n              <Bookshelf books={state} />\r\n            </Route>\r\n          </Switch>\r\n        </Router>\r\n      </DispatchContext.Provider>\r\n    </StateContext.Provider>\r\n  )\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport { initDB } from './uitls/database'\r\nimport * as serviceWorker from './serviceWorker'\r\n\r\ninitDB()\r\n\r\nconst app = <App />\r\n\r\nReactDOM.render(app, document.getElementById('root'))\r\nserviceWorker.register();"],"sourceRoot":""}